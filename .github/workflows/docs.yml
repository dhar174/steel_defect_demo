name: Build and Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs_site/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'docs_site/**'
      - 'mkdocs.yml'

jobs:
  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-docs.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt

    - name: Validate MkDocs configuration
      run: |
        mkdocs config-file mkdocs.yml

    - name: Build documentation
      run: |
        mkdocs build --verbose --clean --strict
        
    - name: Upload documentation artifacts
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4.6.2
      with:
        name: documentation-site
        path: site/
        retention-days: 7

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy documentation for ${{ github.sha }}'

  link-check:
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        pip install linkchecker

    - name: Build documentation
      run: mkdocs build

    - name: Check internal links
      run: |
        # Start a local server
        mkdocs serve --dev-addr=127.0.0.1:8000 &
        sleep 10
        
        # Check links (excluding external links to avoid rate limiting)
        linkchecker --ignore-url="^https?://" http://127.0.0.1:8000/
      continue-on-error: true

  validate-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate Markdown files
      uses: DavidAnson/markdownlint-cli2-action@v16.0.0
      with:
        files: 'docs_site/**/*.md'
        continue-on-error: true
        config: .markdownlint-cli2.jsonc
        globs: "*.{md,markdown}"

    - name: Check for broken relative links
      run: |
        find docs_site -name "*.md" -exec grep -H -n "\]\(\.\./" {} \; | while read line; do
          file=$(echo "$line" | cut -d: -f1)
          lineno=$(echo "$line" | cut -d: -f2)
          link=$(echo "$line" | sed 's/.*](\([^)]*\)).*/\1/')
          
          # Convert relative path to absolute
          dir=$(dirname "$file")
          target=$(realpath -m "$dir/$link" 2>/dev/null || echo "INVALID")
          
          if [[ ! -f "$target" && "$link" != *".md" ]]; then
            echo "Warning: Potentially broken link in $file:$lineno -> $link (resolves to $target)"
          fi
        done
