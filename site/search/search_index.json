{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Steel Defect Prediction System Documentation","text":"<ul> <li> <p> Getting Started</p> <p>Get up and running quickly with our steel casting defect prediction system</p> <p> Quick Start</p> </li> <li> <p> User Guide</p> <p>Complete guide to using the dashboard and monitoring interface</p> <p> Dashboard Overview</p> </li> <li> <p> API Reference</p> <p>Comprehensive API documentation with interactive examples</p> <p> API Docs</p> </li> <li> <p> Architecture</p> <p>Deep dive into system architecture and design decisions</p> <p> System Overview</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>The Steel Defect Prediction System is a comprehensive machine learning solution designed for continuous steel casting operations. It provides real-time defect prediction, quality monitoring, and advanced analytics to help optimize casting processes and reduce product defects.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Real-time Prediction: ML-powered defect prediction using multiple model types (XGBoost, LSTM)</li> <li>Interactive Dashboard: Comprehensive monitoring interface with Dash framework</li> <li>Historical Analysis: Advanced analytics for process optimization</li> <li>Alert Management: Configurable alerting system for proactive quality control</li> <li>Multi-model Comparison: Side-by-side model performance evaluation</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":""},{"location":"#for-new-users","title":"For New Users","text":"<ul> <li>Quick Start Guide - Get running in 5 minutes</li> <li>System Requirements - Hardware and software prerequisites</li> <li>First Prediction - Your first defect prediction</li> </ul>"},{"location":"#for-operators","title":"For Operators","text":"<ul> <li>Dashboard Overview - Navigate the monitoring interface</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<ul> <li>Development Setup - Set up development environment</li> <li>Contributing Guide - How to contribute</li> </ul>"},{"location":"#for-system-administrators","title":"For System Administrators","text":"<ul> <li>System Overview - Understand the architecture</li> </ul>"},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    A[Sensor Data] --&gt; B[Data Pipeline]\n    B --&gt; C[Feature Engineering]\n    C --&gt; D[ML Models]\n    D --&gt; E[Prediction Engine]\n    E --&gt; F[Dashboard]\n    E --&gt; G[Alert System]\n\n    D1[XGBoost Model] --&gt; E\n    D2[LSTM Model] --&gt; E\n\n    H[Historical Data] --&gt; I[Model Training]\n    I --&gt; D\n\n    style A fill:#e1f5fe\n    style F fill:#e8f5e8\n    style G fill:#fff3e0</code></pre>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Machine Learning: XGBoost, PyTorch, scikit-learn</li> <li>Dashboard: Dash, Plotly, Bootstrap</li> <li>Data Processing: pandas, NumPy, PyArrow</li> <li>Infrastructure: Docker, Python 3.8+</li> <li>Documentation: MkDocs Material</li> </ul>"},{"location":"#latest-updates","title":"Latest Updates","text":"<p>Version 0.1.0</p> <ul> <li>Initial release with baseline XGBoost and LSTM models</li> <li>Complete dashboard interface with real-time monitoring</li> <li>Comprehensive alerting system</li> <li>Historical analysis and model comparison tools</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: Browse this comprehensive guide</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul> <p>Last updated: {{ now().strftime('%B %d, %Y') }}</p>"},{"location":"api-reference/dashboard-integration/","title":"Dashboard Integration API","text":"<p>The Steel Defect Prediction System provides a Dash-based dashboard with programmatic access through Python modules and callback interfaces. This page documents the integration patterns and programmatic APIs.</p>"},{"location":"api-reference/dashboard-integration/#architecture-overview","title":"Architecture Overview","text":"<p>The system uses Dash (Plotly) for the web interface rather than traditional REST APIs. Integration is achieved through:</p> <ul> <li>Python Module APIs: Direct Python integration</li> <li>Dashboard Callbacks: Real-time updates via Dash callbacks</li> <li>Data Interfaces: Programmatic access to prediction engines</li> <li>Component APIs: Reusable dashboard components</li> </ul>"},{"location":"api-reference/dashboard-integration/#python-module-integration","title":"Python Module Integration","text":""},{"location":"api-reference/dashboard-integration/#prediction-engine-api","title":"Prediction Engine API","text":"<p>The core prediction functionality is available through Python modules:</p> <pre><code>from src.inference.prediction_engine import PredictionEngine\nfrom src.models.baseline_model import BaselineModel\nfrom src.models.lstm_model import LSTMModel\n\n# Initialize prediction engine\nengine = PredictionEngine()\n\n# Make predictions\nprediction = engine.predict(sensor_data)\nprint(f\"Defect probability: {prediction['defect_probability']}\")\n</code></pre>"},{"location":"api-reference/dashboard-integration/#predictionengine-class","title":"PredictionEngine Class","text":"<pre><code>class PredictionEngine:\n    \"\"\"Main prediction engine for defect detection\"\"\"\n\n    def __init__(self, config: Dict = None):\n        \"\"\"\n        Initialize prediction engine with models.\n\n        Args:\n            config: Configuration dictionary\n        \"\"\"\n\n    def predict(self, data: Dict) -&gt; Dict:\n        \"\"\"\n        Generate defect predictions.\n\n        Args:\n            data: Sensor data dictionary\n\n        Returns:\n            Prediction results with confidence scores\n        \"\"\"\n\n    def predict_batch(self, data: List[Dict]) -&gt; List[Dict]:\n        \"\"\"\n        Generate batch predictions.\n\n        Args:\n            data: List of sensor data dictionaries\n\n        Returns:\n            List of prediction results\n        \"\"\"\n</code></pre>"},{"location":"api-reference/dashboard-integration/#data-interface-api","title":"Data Interface API","text":"<p>Access and manipulate data through standardized interfaces:</p> <pre><code>from src.data.data_connectors import DataConnector\nfrom src.features.feature_engineering import FeatureEngineer\n\n# Data access\nconnector = DataConnector()\ndata = connector.get_latest_data(limit=100)\n\n# Feature engineering\nengineer = FeatureEngineer()\nfeatures = engineer.transform(data)\n</code></pre>"},{"location":"api-reference/dashboard-integration/#dashboard-component-apis","title":"Dashboard Component APIs","text":""},{"location":"api-reference/dashboard-integration/#component-integration","title":"Component Integration","text":"<p>Reusable dashboard components for custom applications:</p> <pre><code>from src.visualization.components import (\n    PredictionDisplay,\n    ModelComparison,\n    SensorMonitoring,\n    AlertManagement\n)\n\n# Create component instances\nprediction_display = PredictionDisplay()\nmodel_comparison = ModelComparison()\nsensor_monitoring = SensorMonitoring()\nalert_management = AlertManagement()\n</code></pre>"},{"location":"api-reference/dashboard-integration/#predictiondisplay-component","title":"PredictionDisplay Component","text":"<p>Real-time prediction visualization:</p> <pre><code>class PredictionDisplay:\n    \"\"\"Real-time prediction display component\"\"\"\n\n    def get_layout(self, initial_data: Dict = None) -&gt; dbc.Container:\n        \"\"\"\n        Get the component layout.\n\n        Args:\n            initial_data: Initial data for display\n\n        Returns:\n            Dash Bootstrap Container with layout\n        \"\"\"\n\n    def update_predictions(self, prediction_data: Dict) -&gt; Dict:\n        \"\"\"\n        Update prediction display with new data.\n\n        Args:\n            prediction_data: Latest prediction results\n\n        Returns:\n            Updated component state\n        \"\"\"\n</code></pre>"},{"location":"api-reference/dashboard-integration/#usage-example","title":"Usage Example","text":"<pre><code># Initialize component\ndisplay = PredictionDisplay()\n\n# Get layout for embedding\nlayout = display.get_layout()\n\n# In Dash callback\n@app.callback(\n    Output('prediction-display', 'children'),\n    [Input('interval-component', 'n_intervals')]\n)\ndef update_display(n):\n    # Get latest predictions\n    predictions = prediction_engine.get_latest_predictions()\n\n    # Update display\n    return display.update_predictions(predictions)\n</code></pre>"},{"location":"api-reference/dashboard-integration/#modelcomparison-component","title":"ModelComparison Component","text":"<p>Compare ML model performance:</p> <pre><code>class ModelComparison:\n    \"\"\"Model performance comparison component\"\"\"\n\n    def get_dashboard_layout(self, model_results: Dict) -&gt; dbc.Container:\n        \"\"\"\n        Create model comparison dashboard.\n\n        Args:\n            model_results: Dictionary with model performance data\n\n        Returns:\n            Complete dashboard layout\n        \"\"\"\n\n    def create_roc_curves(self, model_results: Dict) -&gt; go.Figure:\n        \"\"\"Create ROC curve comparison chart\"\"\"\n\n    def create_feature_importance(self, model_results: Dict) -&gt; go.Figure:\n        \"\"\"Create feature importance comparison\"\"\"\n</code></pre>"},{"location":"api-reference/dashboard-integration/#model-results-format","title":"Model Results Format","text":"<pre><code>model_results = {\n    'XGBoost': {\n        'y_true': np.array([0, 1, 0, 1, ...]),           # True labels\n        'y_pred': np.array([0, 1, 0, 0, ...]),           # Predicted labels\n        'y_pred_proba': np.array([0.1, 0.9, 0.2, ...]), # Probabilities\n        'feature_importance': {                           # Feature importance\n            'temperature': 0.35,\n            'pressure': 0.28,\n            'flow_rate': 0.20,\n            # ...\n        },\n        'metrics': {                                      # Performance metrics\n            'accuracy': 0.87,\n            'precision': 0.84,\n            'recall': 0.82,\n            'f1_score': 0.83\n        }\n    },\n    'LSTM': {\n        # Similar structure for LSTM model\n        'attention_weights': np.array([...])  # Additional for LSTM\n    }\n}\n</code></pre>"},{"location":"api-reference/dashboard-integration/#sensormonitoring-component","title":"SensorMonitoring Component","text":"<p>Real-time sensor data visualization:</p> <pre><code>class SensorMonitoring:\n    \"\"\"Real-time sensor monitoring component\"\"\"\n\n    def create_sensor_charts(self, sensor_data: pd.DataFrame) -&gt; List[go.Figure]:\n        \"\"\"\n        Create sensor monitoring charts.\n\n        Args:\n            sensor_data: DataFrame with sensor readings\n\n        Returns:\n            List of Plotly figures\n        \"\"\"\n\n    def get_alert_indicators(self, sensor_data: pd.DataFrame) -&gt; Dict:\n        \"\"\"\n        Generate alert indicators based on sensor data.\n\n        Args:\n            sensor_data: Current sensor readings\n\n        Returns:\n            Alert status dictionary\n        \"\"\"\n</code></pre>"},{"location":"api-reference/dashboard-integration/#data-formats","title":"Data Formats","text":""},{"location":"api-reference/dashboard-integration/#sensor-data-format","title":"Sensor Data Format","text":"<pre><code>sensor_data = {\n    \"timestamp\": \"2025-07-20T22:18:46Z\",\n    \"cast_id\": \"CAST_20250720_001\",\n    \"sensors\": {\n        \"mold_temperature\": 1520.5,        # \u00b0C\n        \"mold_level\": 150.2,               # mm\n        \"casting_speed\": 1.2,              # m/min\n        \"cooling_water_flow\": 200.8,       # L/min\n        \"superheat\": 25.3,                 # \u00b0C\n        \"mold_powder_consumption\": 0.5,    # kg/min\n        \"secondary_cooling_zones\": [       # Multiple zones\n            {\"zone\": 1, \"water_flow\": 50.2, \"temperature\": 800.1},\n            {\"zone\": 2, \"water_flow\": 45.8, \"temperature\": 650.3},\n            # ...\n        ],\n        \"oscillation_frequency\": 180.0,    # cycles/min\n        \"oscillation_amplitude\": 4.5       # mm\n    },\n    \"process_parameters\": {\n        \"steel_grade\": \"C45\",\n        \"slab_width\": 1200,                # mm\n        \"slab_thickness\": 220,             # mm\n        \"tundish_temperature\": 1545.2      # \u00b0C\n    }\n}\n</code></pre>"},{"location":"api-reference/dashboard-integration/#prediction-response-format","title":"Prediction Response Format","text":"<pre><code>prediction_response = {\n    \"prediction_id\": \"pred_abc123def456\",\n    \"timestamp\": \"2025-07-20T22:18:46Z\",\n    \"cast_id\": \"CAST_20250720_001\",\n    \"defect_probability\": 0.15,           # 0-1 scale\n    \"confidence_score\": 0.89,             # Model confidence\n    \"model_predictions\": {                # Individual model results\n        \"baseline_xgboost\": {\n            \"probability\": 0.12,\n            \"confidence\": 0.87,\n            \"features_used\": 25\n        },\n        \"lstm_sequence\": {\n            \"probability\": 0.18,\n            \"confidence\": 0.91,\n            \"sequence_length\": 60\n        },\n        \"ensemble\": {\n            \"probability\": 0.15,\n            \"confidence\": 0.89,\n            \"weights\": {\n                \"baseline\": 0.4,\n                \"lstm\": 0.6\n            }\n        }\n    },\n    \"alert_level\": \"low\",                 # low, medium, high\n    \"risk_factors\": [                     # Contributing factors\n        {\n            \"factor\": \"temperature_variance\",\n            \"impact\": 0.08,\n            \"description\": \"Temperature fluctuation detected\"\n        }\n    ],\n    \"recommendations\": [                   # Actionable recommendations\n        \"Monitor mold temperature stability\",\n        \"Check cooling water flow consistency\"\n    ]\n}\n</code></pre>"},{"location":"api-reference/dashboard-integration/#dashboard-callbacks","title":"Dashboard Callbacks","text":""},{"location":"api-reference/dashboard-integration/#real-time-updates","title":"Real-time Updates","text":"<p>Dashboard components use Dash callbacks for real-time updates:</p> <pre><code>@app.callback(\n    [Output('prediction-chart', 'figure'),\n     Output('confidence-indicator', 'children'),\n     Output('alert-status', 'color')],\n    [Input('interval-component', 'n_intervals')],\n    [State('theme-store', 'data')]\n)\ndef update_realtime_display(n_intervals, theme):\n    \"\"\"\n    Update real-time prediction display.\n\n    Args:\n        n_intervals: Interval counter\n        theme: Current theme setting\n\n    Returns:\n        Tuple of updated components\n    \"\"\"\n    # Get latest predictions\n    predictions = prediction_engine.get_latest_predictions()\n\n    # Update chart\n    fig = create_prediction_chart(predictions, theme)\n\n    # Update confidence indicator\n    confidence = predictions.get('confidence_score', 0)\n    confidence_text = f\"Confidence: {confidence:.1%}\"\n\n    # Update alert status\n    alert_level = predictions.get('alert_level', 'low')\n    alert_color = {\n        'low': 'success',\n        'medium': 'warning', \n        'high': 'danger'\n    }.get(alert_level, 'secondary')\n\n    return fig, confidence_text, alert_color\n</code></pre>"},{"location":"api-reference/dashboard-integration/#interactive-controls","title":"Interactive Controls","text":"<pre><code>@app.callback(\n    Output('model-comparison-chart', 'figure'),\n    [Input('model-selector', 'value'),\n     Input('metric-selector', 'value')],\n    [State('model-results-store', 'data')]\n)\ndef update_model_comparison(selected_models, selected_metric, model_results):\n    \"\"\"\n    Update model comparison chart based on user selection.\n\n    Args:\n        selected_models: List of selected model names\n        selected_metric: Selected performance metric\n        model_results: Stored model results data\n\n    Returns:\n        Updated comparison chart\n    \"\"\"\n    return model_comparison.create_comparison_chart(\n        selected_models, selected_metric, model_results\n    )\n</code></pre>"},{"location":"api-reference/dashboard-integration/#configuration-api","title":"Configuration API","text":""},{"location":"api-reference/dashboard-integration/#dashboard-configuration","title":"Dashboard Configuration","text":"<p>Configure dashboard behavior programmatically:</p> <pre><code>dashboard_config = {\n    \"refresh_interval\": 5000,              # Milliseconds\n    \"theme\": \"plotly_white\",               # Default theme\n    \"auto_refresh\": True,                  # Enable auto-refresh\n    \"alert_thresholds\": {                  # Alert configuration\n        \"high\": 0.8,\n        \"medium\": 0.5,\n        \"low\": 0.2\n    },\n    \"chart_settings\": {                    # Chart preferences\n        \"height\": 400,\n        \"show_legend\": True,\n        \"color_scheme\": \"viridis\"\n    },\n    \"data_retention\": {                    # Data management\n        \"realtime_hours\": 24,\n        \"historical_days\": 365\n    }\n}\n</code></pre>"},{"location":"api-reference/dashboard-integration/#model-configuration","title":"Model Configuration","text":"<pre><code>model_config = {\n    \"baseline_model\": {\n        \"type\": \"xgboost\",\n        \"n_estimators\": 100,\n        \"max_depth\": 6,\n        \"learning_rate\": 0.1,\n        \"feature_selection\": \"auto\"\n    },\n    \"lstm_model\": {\n        \"type\": \"lstm\",\n        \"sequence_length\": 60,\n        \"hidden_size\": 128,\n        \"num_layers\": 2,\n        \"dropout\": 0.2,\n        \"bidirectional\": True\n    },\n    \"ensemble\": {\n        \"method\": \"weighted_average\",\n        \"weights\": {\n            \"baseline\": 0.4,\n            \"lstm\": 0.6\n        }\n    }\n}\n</code></pre>"},{"location":"api-reference/dashboard-integration/#integration-examples","title":"Integration Examples","text":""},{"location":"api-reference/dashboard-integration/#custom-dashboard-integration","title":"Custom Dashboard Integration","text":"<pre><code>import dash\nfrom dash import dcc, html\nimport dash_bootstrap_components as dbc\nfrom src.visualization.components import ModelComparison, PredictionDisplay\n\n# Create custom dashboard\napp = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])\n\n# Initialize components\nprediction_display = PredictionDisplay()\nmodel_comparison = ModelComparison()\n\n# Custom layout\napp.layout = dbc.Container([\n    html.H1(\"Custom Steel Defect Dashboard\"),\n\n    # Real-time predictions\n    dbc.Row([\n        dbc.Col([\n            html.H3(\"Real-time Predictions\"),\n            prediction_display.get_layout()\n        ], width=8),\n\n        # Alert panel\n        dbc.Col([\n            html.H3(\"Alerts\"),\n            html.Div(id=\"alert-panel\")\n        ], width=4)\n    ]),\n\n    # Model comparison\n    dbc.Row([\n        dbc.Col([\n            html.H3(\"Model Performance\"),\n            model_comparison.get_dashboard_layout({})\n        ], width=12)\n    ]),\n\n    # Auto-refresh\n    dcc.Interval(\n        id='interval-component',\n        interval=5000,  # Update every 5 seconds\n        n_intervals=0\n    )\n])\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n</code></pre>"},{"location":"api-reference/dashboard-integration/#programmatic-prediction","title":"Programmatic Prediction","text":"<pre><code>from src.inference.prediction_engine import PredictionEngine\nimport pandas as pd\n\n# Initialize engine\nengine = PredictionEngine()\n\n# Load sensor data\nsensor_data = pd.read_csv('sensor_readings.csv')\n\n# Generate predictions\npredictions = []\nfor _, row in sensor_data.iterrows():\n    prediction = engine.predict(row.to_dict())\n    predictions.append(prediction)\n\n# Analyze results\nresults_df = pd.DataFrame(predictions)\nhigh_risk_casts = results_df[results_df['defect_probability'] &gt; 0.8]\n\nprint(f\"High risk casts: {len(high_risk_casts)}\")\nprint(f\"Average confidence: {results_df['confidence_score'].mean():.2f}\")\n</code></pre>"},{"location":"api-reference/dashboard-integration/#error-handling","title":"Error Handling","text":""},{"location":"api-reference/dashboard-integration/#common-exceptions","title":"Common Exceptions","text":"<pre><code>from src.utils.exceptions import (\n    PredictionError,\n    DataValidationError,\n    ModelNotFoundError\n)\n\ntry:\n    prediction = engine.predict(sensor_data)\nexcept PredictionError as e:\n    print(f\"Prediction failed: {e}\")\nexcept DataValidationError as e:\n    print(f\"Invalid data format: {e}\")\nexcept ModelNotFoundError as e:\n    print(f\"Model not available: {e}\")\n</code></pre>"},{"location":"api-reference/dashboard-integration/#graceful-degradation","title":"Graceful Degradation","text":"<pre><code>def safe_prediction(sensor_data):\n    \"\"\"Make prediction with fallback handling\"\"\"\n    try:\n        return engine.predict(sensor_data)\n    except Exception as e:\n        logger.error(f\"Prediction error: {e}\")\n        return {\n            \"defect_probability\": 0.0,\n            \"confidence_score\": 0.0,\n            \"alert_level\": \"unknown\",\n            \"error\": str(e)\n        }\n</code></pre> <p>Next: System Overview \u2192</p>"},{"location":"architecture/system-overview/","title":"System Architecture Overview","text":"<p>This document provides a comprehensive overview of the Steel Defect Prediction System architecture, including components, data flow, and integration patterns.</p>"},{"location":"architecture/system-overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Data Sources\"\n        A[Sensor Data]\n        B[Historical Data]\n        C[Configuration]\n    end\n\n    subgraph \"Data Pipeline\"\n        D[Data Ingestion]\n        E[Feature Engineering]\n        F[Data Validation]\n        G[Data Storage]\n    end\n\n    subgraph \"ML Pipeline\"\n        H[Model Training]\n        I[Model Validation]\n        J[Model Deployment]\n        K[Inference Engine]\n    end\n\n    subgraph \"Application Layer\"\n        L[Prediction API]\n        M[Dashboard Backend]\n        N[Alert System]\n        O[Monitoring]\n    end\n\n    subgraph \"User Interface\"\n        P[Web Dashboard]\n        Q[API Clients]\n        R[Alert Notifications]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n\n    G --&gt; H\n    H --&gt; I\n    I --&gt; J\n    J --&gt; K\n\n    K --&gt; L\n    K --&gt; M\n    K --&gt; N\n\n    L --&gt; Q\n    M --&gt; P\n    N --&gt; R\n    O --&gt; P\n\n    style A fill:#e1f5fe\n    style P fill:#e8f5e8\n    style K fill:#fff3e0\n    style N fill:#ffebee</code></pre>"},{"location":"architecture/system-overview/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/system-overview/#1-data-layer","title":"1. Data Layer","text":""},{"location":"architecture/system-overview/#data-sources","title":"Data Sources","text":"<ul> <li>Sensor Systems: Real-time sensor data streams</li> <li>Historical Database: Historical casting data</li> <li>Configuration Store: System and model configurations</li> <li>External Systems: ERP, MES integration</li> </ul>"},{"location":"architecture/system-overview/#data-storage","title":"Data Storage","text":"<pre><code>data/\n\u251c\u2500\u2500 raw/                 # Raw sensor data\n\u251c\u2500\u2500 processed/          # Cleaned and validated data\n\u251c\u2500\u2500 features/           # Engineered features\n\u251c\u2500\u2500 models/             # Trained model artifacts\n\u2514\u2500\u2500 results/            # Prediction results\n</code></pre>"},{"location":"architecture/system-overview/#2-processing-layer","title":"2. Processing Layer","text":""},{"location":"architecture/system-overview/#data-pipeline-components","title":"Data Pipeline Components","text":"<pre><code>graph LR\n    A[Raw Data] --&gt; B[Validation]\n    B --&gt; C[Cleaning]\n    C --&gt; D[Feature Engineering]\n    D --&gt; E[Normalization]\n    E --&gt; F[Storage]\n\n    subgraph \"Quality Checks\"\n        G[Range Validation]\n        H[Anomaly Detection]\n        I[Completeness Check]\n    end\n\n    B --&gt; G\n    B --&gt; H\n    B --&gt; I</code></pre>"},{"location":"architecture/system-overview/#key-components","title":"Key Components","text":"<ul> <li>Data Ingestion: <code>src/connectors/data_connectors.py</code></li> <li>Feature Engineering: <code>src/features/feature_engineering.py</code></li> <li>Data Validation: <code>src/data/data_validation.py</code></li> <li>Storage Management: <code>src/data/data_storage.py</code></li> </ul>"},{"location":"architecture/system-overview/#3-machine-learning-layer","title":"3. Machine Learning Layer","text":""},{"location":"architecture/system-overview/#model-architecture","title":"Model Architecture","text":"<pre><code>graph TB\n    subgraph \"Training Pipeline\"\n        A[Training Data]\n        B[Feature Selection]\n        C[Model Training]\n        D[Validation]\n        E[Model Registry]\n    end\n\n    subgraph \"Models\"\n        F[XGBoost Baseline]\n        G[LSTM Deep Learning]\n        H[Ensemble Model]\n    end\n\n    subgraph \"Inference Pipeline\"\n        I[Real-time Features]\n        J[Model Ensemble]\n        K[Prediction Output]\n        L[Confidence Scoring]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; F\n    C --&gt; G\n    C --&gt; H\n\n    F --&gt; E\n    G --&gt; E\n    H --&gt; E\n\n    I --&gt; J\n    F --&gt; J\n    G --&gt; J\n    H --&gt; J\n\n    J --&gt; K\n    J --&gt; L</code></pre>"},{"location":"architecture/system-overview/#model-components","title":"Model Components","text":"<ul> <li>Baseline Model: XGBoost classifier with engineered features</li> <li>Deep Learning: LSTM for sequence modeling</li> <li>Ensemble: Weighted combination of multiple models</li> <li>Feature Engineering: Automated feature extraction and selection</li> </ul>"},{"location":"architecture/system-overview/#4-application-layer","title":"4. Application Layer","text":""},{"location":"architecture/system-overview/#service-architecture","title":"Service Architecture","text":"<pre><code># Core application structure\nsrc/\n\u251c\u2500\u2500 models/              # ML model implementations\n\u2502   \u251c\u2500\u2500 baseline_model.py\n\u2502   \u251c\u2500\u2500 lstm_model.py\n\u2502   \u2514\u2500\u2500 model_trainer.py\n\u251c\u2500\u2500 inference/           # Prediction engine\n\u2502   \u251c\u2500\u2500 prediction_engine.py\n\u2502   \u2514\u2500\u2500 inference_pipeline.py\n\u251c\u2500\u2500 visualization/       # Dashboard components\n\u2502   \u251c\u2500\u2500 dashboard.py\n\u2502   \u2514\u2500\u2500 components/\n\u251c\u2500\u2500 monitoring/          # System monitoring\n\u2502   \u251c\u2500\u2500 alert_system.py\n\u2502   \u2514\u2500\u2500 health_checks.py\n\u2514\u2500\u2500 utils/              # Shared utilities\n    \u251c\u2500\u2500 config.py\n    \u2514\u2500\u2500 logging.py\n</code></pre>"},{"location":"architecture/system-overview/#api-design","title":"API Design","text":"<pre><code>graph LR\n    subgraph \"API Layer\"\n        A[FastAPI App]\n        B[Authentication]\n        C[Rate Limiting]\n        D[Request Validation]\n    end\n\n    subgraph \"Business Logic\"\n        E[Prediction Service]\n        F[Data Service]\n        G[Alert Service]\n        H[Monitoring Service]\n    end\n\n    subgraph \"Data Access\"\n        I[Model Repository]\n        J[Data Repository]\n        K[Config Repository]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    D --&gt; F\n    D --&gt; G\n    D --&gt; H\n\n    E --&gt; I\n    F --&gt; J\n    G --&gt; K\n    H --&gt; J</code></pre>"},{"location":"architecture/system-overview/#5-user-interface-layer","title":"5. User Interface Layer","text":""},{"location":"architecture/system-overview/#dashboard-architecture","title":"Dashboard Architecture","text":"<p>The dashboard is built using Dash (Plotly) with a component-based architecture:</p> <pre><code># Dashboard component structure\nsrc/visualization/\n\u251c\u2500\u2500 dashboard.py         # Main dashboard app\n\u251c\u2500\u2500 components/          # Reusable UI components\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 prediction_display.py\n\u2502   \u251c\u2500\u2500 model_comparison.py\n\u2502   \u251c\u2500\u2500 historical_analysis.py\n\u2502   \u251c\u2500\u2500 alert_management.py\n\u2502   \u2514\u2500\u2500 sensor_monitoring.py\n\u251c\u2500\u2500 layouts/            # Page layouts\n\u251c\u2500\u2500 callbacks/          # Interactive callbacks\n\u2514\u2500\u2500 utils/             # UI utilities\n</code></pre>"},{"location":"architecture/system-overview/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"architecture/system-overview/#real-time-prediction-flow","title":"Real-time Prediction Flow","text":"<pre><code>sequenceDiagram\n    participant S as Sensors\n    participant DC as Data Connector\n    participant FE as Feature Engine\n    participant IE as Inference Engine\n    participant DB as Dashboard\n    participant AS as Alert System\n\n    S-&gt;&gt;DC: Raw sensor data\n    DC-&gt;&gt;FE: Validated data\n    FE-&gt;&gt;IE: Engineered features\n    IE-&gt;&gt;IE: Model inference\n    IE-&gt;&gt;DB: Prediction results\n    IE-&gt;&gt;AS: Alert evaluation\n    AS-&gt;&gt;AS: Threshold check\n    DB-&gt;&gt;DB: UI update\n\n    Note over IE: Multiple model&lt;br/&gt;ensemble\n    Note over AS: Configurable&lt;br/&gt;thresholds</code></pre>"},{"location":"architecture/system-overview/#batch-processing-flow","title":"Batch Processing Flow","text":"<pre><code>sequenceDiagram\n    participant HD as Historical Data\n    participant DP as Data Pipeline\n    participant MT as Model Trainer\n    participant MR as Model Registry\n    participant IE as Inference Engine\n\n    HD-&gt;&gt;DP: Historical dataset\n    DP-&gt;&gt;DP: Feature engineering\n    DP-&gt;&gt;MT: Training data\n    MT-&gt;&gt;MT: Model training\n    MT-&gt;&gt;MR: Model artifacts\n    MR-&gt;&gt;IE: Updated models\n\n    Note over MT: Cross-validation&lt;br/&gt;and hyperparameter&lt;br/&gt;optimization</code></pre>"},{"location":"architecture/system-overview/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/system-overview/#core-technologies","title":"Core Technologies","text":"Layer Technology Purpose ML Framework PyTorch, scikit-learn, XGBoost Model development and training Data Processing pandas, NumPy, PyArrow Data manipulation and analysis Web Framework Dash, Plotly Interactive dashboard API Framework FastAPI RESTful API services Database SQLite/PostgreSQL Data persistence Caching Redis High-performance caching"},{"location":"architecture/system-overview/#development-tools","title":"Development Tools","text":"Category Tools Language Python 3.8+ Testing pytest, unittest Linting flake8, black, mypy Documentation MkDocs, Sphinx Containerization Docker, docker-compose CI/CD GitHub Actions"},{"location":"architecture/system-overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/system-overview/#development-environment","title":"Development Environment","text":"<pre><code># Local development stack\nservices:\n  app:\n    build: .\n    ports:\n      - \"8050:8050\"\n    volumes:\n      - .:/app\n    environment:\n      - ENV=development\n\n  database:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=steel_defect\n\n  redis:\n    image: redis:6-alpine\n</code></pre>"},{"location":"architecture/system-overview/#production-environment","title":"Production Environment","text":"<pre><code>graph TB\n    subgraph \"Load Balancer\"\n        A[HAProxy/nginx]\n    end\n\n    subgraph \"Application Tier\"\n        B[App Instance 1]\n        C[App Instance 2]\n        D[App Instance N]\n    end\n\n    subgraph \"Data Tier\"\n        E[PostgreSQL Primary]\n        F[PostgreSQL Replica]\n        G[Redis Cluster]\n    end\n\n    subgraph \"Monitoring\"\n        H[Prometheus]\n        I[Grafana]\n        J[ELK Stack]\n    end\n\n    A --&gt; B\n    A --&gt; C\n    A --&gt; D\n\n    B --&gt; E\n    C --&gt; E\n    D --&gt; E\n\n    E --&gt; F\n\n    B --&gt; G\n    C --&gt; G\n    D --&gt; G\n\n    B --&gt; H\n    C --&gt; H\n    D --&gt; H\n\n    H --&gt; I\n    H --&gt; J</code></pre>"},{"location":"architecture/system-overview/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/system-overview/#authentication-and-authorization","title":"Authentication and Authorization","text":"<pre><code>graph LR\n    subgraph \"Client\"\n        A[Web Browser]\n        B[API Client]\n    end\n\n    subgraph \"Auth Layer\"\n        C[Authentication Service]\n        D[Authorization Service]\n        E[Token Management]\n    end\n\n    subgraph \"Application\"\n        F[Dashboard]\n        G[API Endpoints]\n        H[Admin Interface]\n    end\n\n    A --&gt; C\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    E --&gt; G\n    E --&gt; H</code></pre>"},{"location":"architecture/system-overview/#security-measures","title":"Security Measures","text":"<ul> <li>Authentication: Token-based authentication</li> <li>Authorization: Role-based access control (RBAC)</li> <li>Data Encryption: TLS/SSL for data in transit</li> <li>Input Validation: Comprehensive request validation</li> <li>Rate Limiting: API rate limiting and throttling</li> <li>Audit Logging: Security event logging</li> </ul>"},{"location":"architecture/system-overview/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/system-overview/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Stateless Design: Application instances are stateless</li> <li>Load Balancing: Multiple app instances behind load balancer</li> <li>Database Scaling: Read replicas and connection pooling</li> <li>Caching Strategy: Distributed caching with Redis cluster</li> </ul>"},{"location":"architecture/system-overview/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Model Optimization: Model quantization and optimization</li> <li>Data Pipeline: Parallel processing and streaming</li> <li>Frontend: Lazy loading and caching</li> <li>API: Async processing and connection pooling</li> </ul>"},{"location":"architecture/system-overview/#integration-patterns","title":"Integration Patterns","text":""},{"location":"architecture/system-overview/#external-system-integration","title":"External System Integration","text":"<pre><code>graph LR\n    subgraph \"Steel Defect System\"\n        A[API Gateway]\n        B[Data Connectors]\n        C[Event Bus]\n    end\n\n    subgraph \"External Systems\"\n        D[MES System]\n        E[ERP System]\n        F[SCADA]\n        G[Quality Management]\n    end\n\n    D --&gt; B\n    E --&gt; B\n    F --&gt; B\n    G --&gt; A\n\n    B --&gt; C\n    A --&gt; C</code></pre>"},{"location":"architecture/system-overview/#integration-methods","title":"Integration Methods","text":"<ul> <li>REST APIs: Standard HTTP/JSON APIs</li> <li>WebSockets: Real-time data streaming</li> <li>Message Queues: Asynchronous processing</li> <li>File Transfer: Batch data exchange</li> <li>Database Integration: Direct database connections</li> </ul> <p>Next: Contributing Guide \u2192</p>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to the Steel Defect Prediction System! This guide provides everything you need to know to contribute effectively.</p>"},{"location":"development/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Development Workflow</li> <li>Code Standards</li> <li>Testing Guidelines</li> <li>Documentation</li> <li>Pull Request Process</li> <li>Code of Conduct</li> </ul>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>Virtual environment tool (venv, conda, etc.)</li> <li>Basic understanding of machine learning concepts</li> <li>Familiarity with Dash/Plotly for UI contributions</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork and Clone <pre><code># Fork the repository on GitHub, then clone your fork\ngit clone https://github.com/YOUR_USERNAME/steel_defect_demo.git\ncd steel_defect_demo\n\n# Add upstream remote\ngit remote add upstream https://github.com/dhar174/steel_defect_demo.git\n</code></pre></p> </li> <li> <p>Create Virtual Environment <pre><code># Using venv\npython -m venv steel_defect_env\nsource steel_defect_env/bin/activate  # Linux/macOS\n# steel_defect_env\\Scripts\\activate   # Windows\n\n# Using conda\nconda create -n steel_defect_env python=3.9\nconda activate steel_defect_env\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code># Install in development mode\npip install -e .\n\n# Install development dependencies\npip install -r requirements-docs.txt\n\n# Install pre-commit hooks (optional but recommended)\npip install pre-commit\npre-commit install\n</code></pre></p> </li> <li> <p>Verify Setup <pre><code># Run tests\npython -m pytest tests/ -v\n\n# Run demo to verify installation\npython demo_model_comparison.py\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#branch-strategy","title":"Branch Strategy","text":"<p>We use a feature branch workflow:</p> <pre><code>main branch (stable)\n\u251c\u2500\u2500 feature/new-model-type\n\u251c\u2500\u2500 bugfix/dashboard-loading-issue\n\u251c\u2500\u2500 docs/api-documentation\n\u2514\u2500\u2500 enhancement/alert-system-improvements\n</code></pre>"},{"location":"development/contributing/#creating-a-feature-branch","title":"Creating a Feature Branch","text":"<pre><code># Update main branch\ngit checkout main\ngit pull upstream main\n\n# Create and switch to feature branch\ngit checkout -b feature/your-feature-name\n\n# Push feature branch to your fork\ngit push -u origin feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#branch-naming-convention","title":"Branch Naming Convention","text":"<ul> <li>Features: <code>feature/description-of-feature</code></li> <li>Bug fixes: <code>bugfix/description-of-bug</code></li> <li>Documentation: <code>docs/description-of-docs</code></li> <li>Enhancements: <code>enhancement/description-of-enhancement</code></li> <li>Experimental: <code>experiment/description-of-experiment</code></li> </ul>"},{"location":"development/contributing/#code-standards","title":"Code Standards","text":""},{"location":"development/contributing/#python-code-style","title":"Python Code Style","text":"<p>We follow PEP 8 with some modifications:</p> <pre><code># Good: Clear, descriptive names\ndef calculate_defect_probability(sensor_data: Dict[str, float]) -&gt; float:\n    \"\"\"\n    Calculate defect probability based on sensor readings.\n\n    Args:\n        sensor_data: Dictionary containing sensor measurements\n\n    Returns:\n        Defect probability between 0 and 1\n\n    Raises:\n        ValueError: If sensor data is invalid\n    \"\"\"\n    if not sensor_data:\n        raise ValueError(\"Sensor data cannot be empty\")\n\n    # Implementation here\n    return probability\n\n# Bad: Unclear names and missing documentation\ndef calc(data):\n    if not data:\n        return 0\n    # What does this do?\n    return result\n</code></pre>"},{"location":"development/contributing/#code-formatting","title":"Code Formatting","text":"<p>We use Black for code formatting:</p> <pre><code># Format all Python files\nblack .\n\n# Check formatting without changes\nblack --check .\n\n# Format specific file\nblack src/models/baseline_model.py\n</code></pre>"},{"location":"development/contributing/#import-organization","title":"Import Organization","text":"<pre><code># Standard library imports\nimport os\nimport sys\nfrom typing import Dict, List, Optional\nfrom dataclasses import dataclass\n\n# Third-party imports\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Local imports\nfrom src.models.base_model import BaseModel\nfrom src.utils.config import Config\nfrom src.data.preprocessor import DataPreprocessor\n</code></pre>"},{"location":"development/contributing/#type-hints","title":"Type Hints","text":"<p>Use type hints for better code clarity:</p> <pre><code>from typing import Dict, List, Optional, Union, Tuple\n\ndef process_sensor_data(\n    data: Dict[str, float],\n    window_size: int = 60,\n    normalize: bool = True\n) -&gt; Tuple[np.ndarray, Dict[str, float]]:\n    \"\"\"Process sensor data with proper type hints.\"\"\"\n    # Implementation\n    return processed_data, metadata\n</code></pre>"},{"location":"development/contributing/#docstring-style","title":"Docstring Style","text":"<p>Use Google-style docstrings:</p> <pre><code>def train_model(\n    training_data: pd.DataFrame,\n    model_params: Dict[str, Any],\n    validation_split: float = 0.2\n) -&gt; Tuple[BaseModel, Dict[str, float]]:\n    \"\"\"\n    Train a machine learning model for defect prediction.\n\n    This function trains a model using the provided training data and\n    parameters, with automatic validation splitting and performance evaluation.\n\n    Args:\n        training_data: DataFrame containing training samples with features\n            and target labels. Must include 'defect_label' column.\n        model_params: Dictionary of model hyperparameters. Required keys\n            depend on model type (e.g., 'n_estimators' for XGBoost).\n        validation_split: Fraction of data to use for validation (0.0-1.0).\n            Defaults to 0.2 (20% validation).\n\n    Returns:\n        A tuple containing:\n            - Trained model instance\n            - Dictionary of validation metrics including accuracy, precision,\n              recall, and F1-score\n\n    Raises:\n        ValueError: If training_data is empty or missing required columns.\n        TypeError: If model_params is not a dictionary.\n\n    Example:\n        &gt;&gt;&gt; training_df = pd.read_csv('training_data.csv')\n        &gt;&gt;&gt; params = {'n_estimators': 100, 'max_depth': 6}\n        &gt;&gt;&gt; model, metrics = train_model(training_df, params)\n        &gt;&gt;&gt; print(f\"Accuracy: {metrics['accuracy']:.3f}\")\n        Accuracy: 0.876\n    \"\"\"\n    # Implementation here\n    pass\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                   # Unit tests\n\u2502   \u251c\u2500\u2500 test_models/\n\u2502   \u251c\u2500\u2500 test_data/\n\u2502   \u2514\u2500\u2500 test_utils/\n\u251c\u2500\u2500 integration/            # Integration tests\n\u2502   \u251c\u2500\u2500 test_pipeline/\n\u2502   \u2514\u2500\u2500 test_dashboard/\n\u251c\u2500\u2500 fixtures/              # Test data and fixtures\n\u2502   \u251c\u2500\u2500 sample_data.csv\n\u2502   \u2514\u2500\u2500 mock_models/\n\u2514\u2500\u2500 conftest.py            # Shared test configuration\n</code></pre>"},{"location":"development/contributing/#writing-unit-tests","title":"Writing Unit Tests","text":"<pre><code>import pytest\nimport pandas as pd\nimport numpy as np\nfrom unittest.mock import Mock, patch\n\nfrom src.models.baseline_model import BaselineModel\nfrom src.utils.exceptions import ModelNotTrainedError\n\nclass TestBaselineModel:\n    \"\"\"Test suite for BaselineModel class.\"\"\"\n\n    @pytest.fixture\n    def sample_data(self):\n        \"\"\"Create sample training data.\"\"\"\n        return pd.DataFrame({\n            'temperature': [1520, 1525, 1518, 1522],\n            'pressure': [150, 155, 148, 152],\n            'defect_label': [0, 1, 0, 1]\n        })\n\n    @pytest.fixture\n    def trained_model(self, sample_data):\n        \"\"\"Create a trained model instance.\"\"\"\n        model = BaselineModel()\n        model.train(sample_data)\n        return model\n\n    def test_model_initialization(self):\n        \"\"\"Test model initialization with default parameters.\"\"\"\n        model = BaselineModel()\n        assert model.is_trained is False\n        assert model.model_type == 'xgboost'\n\n    def test_model_training_success(self, sample_data):\n        \"\"\"Test successful model training.\"\"\"\n        model = BaselineModel()\n        metrics = model.train(sample_data)\n\n        assert model.is_trained is True\n        assert 'accuracy' in metrics\n        assert 0 &lt;= metrics['accuracy'] &lt;= 1\n\n    def test_model_training_invalid_data(self):\n        \"\"\"Test model training with invalid data.\"\"\"\n        model = BaselineModel()\n\n        with pytest.raises(ValueError, match=\"Training data cannot be empty\"):\n            model.train(pd.DataFrame())\n\n    def test_prediction_without_training(self):\n        \"\"\"Test prediction on untrained model raises error.\"\"\"\n        model = BaselineModel()\n        sensor_data = {'temperature': 1520, 'pressure': 150}\n\n        with pytest.raises(ModelNotTrainedError):\n            model.predict(sensor_data)\n\n    def test_prediction_success(self, trained_model):\n        \"\"\"Test successful prediction.\"\"\"\n        sensor_data = {'temperature': 1520, 'pressure': 150}\n        prediction = trained_model.predict(sensor_data)\n\n        assert 'defect_probability' in prediction\n        assert 0 &lt;= prediction['defect_probability'] &lt;= 1\n        assert 'confidence_score' in prediction\n\n    @patch('src.models.baseline_model.joblib.load')\n    def test_model_loading(self, mock_load):\n        \"\"\"Test model loading from file.\"\"\"\n        mock_load.return_value = Mock()\n\n        model = BaselineModel()\n        model.load('path/to/model.pkl')\n\n        assert model.is_trained is True\n        mock_load.assert_called_once_with('path/to/model.pkl')\n</code></pre>"},{"location":"development/contributing/#integration-tests","title":"Integration Tests","text":"<pre><code>import pytest\nfrom src.inference.prediction_engine import PredictionEngine\nfrom src.data.data_connectors import DataConnector\n\nclass TestPredictionPipeline:\n    \"\"\"Integration tests for the complete prediction pipeline.\"\"\"\n\n    def test_end_to_end_prediction(self):\n        \"\"\"Test complete prediction pipeline from data to result.\"\"\"\n        # Setup\n        engine = PredictionEngine()\n        connector = DataConnector()\n\n        # Get test data\n        test_data = connector.get_test_data()\n\n        # Make prediction\n        result = engine.predict(test_data)\n\n        # Verify result structure\n        assert 'defect_probability' in result\n        assert 'confidence_score' in result\n        assert 'model_predictions' in result\n        assert result['defect_probability'] &gt;= 0\n        assert result['defect_probability'] &lt;= 1\n</code></pre>"},{"location":"development/contributing/#test-data-management","title":"Test Data Management","text":"<pre><code># conftest.py - Shared test fixtures\nimport pytest\nimport pandas as pd\nimport numpy as np\n\n@pytest.fixture(scope=\"session\")\ndef sample_sensor_data():\n    \"\"\"Create sample sensor data for testing.\"\"\"\n    np.random.seed(42)  # Reproducible results\n\n    n_samples = 1000\n    data = {\n        'timestamp': pd.date_range('2024-01-01', periods=n_samples, freq='1min'),\n        'temperature': np.random.normal(1520, 10, n_samples),\n        'pressure': np.random.normal(150, 5, n_samples),\n        'flow_rate': np.random.normal(200, 20, n_samples),\n        'defect_label': np.random.binomial(1, 0.1, n_samples)  # 10% defect rate\n    }\n\n    return pd.DataFrame(data)\n\n@pytest.fixture\ndef mock_model():\n    \"\"\"Create a mock model for testing.\"\"\"\n    from unittest.mock import Mock\n\n    model = Mock()\n    model.predict.return_value = {\n        'defect_probability': 0.15,\n        'confidence_score': 0.89\n    }\n    model.is_trained = True\n\n    return model\n</code></pre>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=src --cov-report=html\n\n# Run specific test file\npytest tests/unit/test_models/test_baseline_model.py\n\n# Run with verbose output\npytest -v\n\n# Run tests matching pattern\npytest -k \"test_prediction\"\n\n# Run only failed tests from last run\npytest --lf\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<ul> <li>Every public function/class must have docstrings</li> <li>Use type hints for all function parameters and returns</li> <li>Include examples in docstrings for complex functions</li> <li>Document exceptions that can be raised</li> </ul>"},{"location":"development/contributing/#adding-new-documentation","title":"Adding New Documentation","text":"<ol> <li>Create markdown files in the appropriate <code>docs_site/</code> subdirectory</li> <li>Update <code>mkdocs.yml</code> navigation if adding new pages</li> <li>Use consistent formatting with existing documentation</li> <li>Include code examples and practical usage</li> <li>Add diagrams using Mermaid when helpful</li> </ol>"},{"location":"development/contributing/#documentation-style","title":"Documentation Style","text":"<pre><code># Page Title\n\nBrief introduction paragraph explaining the purpose and scope.\n\n## Major Section\n\nDetailed explanation with examples.\n\n### Subsection\n\nMore specific information.\n\n```python\n# Code example with comments\ndef example_function():\n    \"\"\"Example with proper documentation.\"\"\"\n    return \"result\"\n</code></pre> <p>Important Note</p> <p>Use admonitions for important information.</p> <p>Warning</p> <p>Use warnings for potential issues.</p> <p>Pro Tip</p> <p>Use tips for helpful suggestions.</p> <pre><code>## Pull Request Process\n\n### Before Submitting\n\n1. **Ensure all tests pass**\n   ```bash\n   pytest\n   ```\n\n2. **Code formatting**\n   ```bash\n   black .\n   flake8 .\n   ```\n\n3. **Update documentation** if needed\n\n4. **Update changelog** in `CHANGELOG.md`\n\n### Pull Request Template\n\nWhen creating a pull request, include:\n\n```markdown\n## Description\nBrief description of changes made.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change that fixes an issue)\n- [ ] New feature (non-breaking change that adds functionality)\n- [ ] Breaking change (fix or feature that causes existing functionality to change)\n- [ ] Documentation update\n\n## Testing\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] I have tested the changes in the dashboard interface\n\n## Checklist\n- [ ] My code follows the style guidelines of this project\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n\n## Screenshots (if applicable)\nAdd screenshots to help explain your changes.\n</code></pre>"},{"location":"development/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass (tests, linting, etc.)</li> <li>Code review by at least one maintainer</li> <li>Manual testing of significant changes</li> <li>Documentation review if docs are updated</li> <li>Merge after approval</li> </ol>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":""},{"location":"development/contributing/#our-pledge","title":"Our Pledge","text":"<p>We are committed to providing a welcoming and inclusive environment for all contributors, regardless of experience level, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.</p>"},{"location":"development/contributing/#expected-behavior","title":"Expected Behavior","text":"<ul> <li>Be respectful and inclusive</li> <li>Be collaborative and helpful</li> <li>Be patient with newcomers</li> <li>Give constructive feedback</li> <li>Focus on what is best for the community</li> </ul>"},{"location":"development/contributing/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<ul> <li>Harassment, discrimination, or exclusionary behavior</li> <li>Personal attacks or insults</li> <li>Trolling or inflammatory comments</li> <li>Publishing private information without permission</li> <li>Any other conduct that could reasonably be considered inappropriate</li> </ul>"},{"location":"development/contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you experience or witness unacceptable behavior, please contact the project maintainers at [contact information].</p>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#resources","title":"Resources","text":"<ul> <li>Documentation: This comprehensive guide</li> <li>Issues: GitHub Issues for bugs and feature requests</li> <li>Discussions: GitHub Discussions for questions and ideas</li> <li>Wiki: Additional technical notes and examples</li> </ul>"},{"location":"development/contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: For bug reports and feature requests</li> <li>GitHub Discussions: For questions, ideas, and general discussion</li> <li>Pull Request Reviews: For code-specific feedback</li> </ul>"},{"location":"development/contributing/#getting-started-issues","title":"Getting Started Issues","text":"<p>Look for issues labeled <code>good first issue</code> or <code>help wanted</code> if you're new to the project. These are typically:</p> <ul> <li>Documentation improvements</li> <li>Small bug fixes</li> <li>Test coverage improvements</li> <li>Code style cleanup</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in:</p> <ul> <li>CONTRIBUTORS.md file</li> <li>Release notes for significant contributions</li> <li>Documentation credits</li> </ul> <p>Thank you for contributing to the Steel Defect Prediction System! \ud83d\ude80</p> <p>Next: Changelog \u2192</p>"},{"location":"getting-started/first-prediction/","title":"First Prediction Tutorial","text":"<p>This tutorial walks you through making your first defect prediction with the Steel Defect Prediction System. You'll learn to load data, run models, and interpret results.</p>"},{"location":"getting-started/first-prediction/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Quick Start setup</li> <li>System running and tested</li> <li>Basic understanding of steel casting processes</li> </ul>"},{"location":"getting-started/first-prediction/#tutorial-overview","title":"Tutorial Overview","text":"<p>We'll cover: 1. Loading sample data 2. Running a prediction 3. Understanding the output 4. Exploring the dashboard</p>"},{"location":"getting-started/first-prediction/#loading-sample-data","title":"Loading Sample Data","text":"<p>The system includes synthetic sample data that mimics real steel casting sensor readings.</p>"},{"location":"getting-started/first-prediction/#using-python","title":"Using Python","text":"<pre><code>from src.data.data_connectors import DataConnector\nimport pandas as pd\n\n# Initialize data connector\nconnector = DataConnector()\n\n# Load sample sensor data\nsample_data = connector.get_sample_data()\nprint(f\"Loaded {len(sample_data)} data points\")\n\n# View first few rows\nprint(sample_data.head())\n</code></pre> <p>Expected output: <pre><code>Loaded 1000 data points\n   timestamp  mold_temperature  mold_level  casting_speed  cooling_water_flow  superheat\n0 2024-01-01               1520      150.0            1.2               200.0       25.0\n1 2024-01-01               1522      149.8            1.2               201.2       24.8\n2 2024-01-01               1521      150.2            1.1               199.8       25.2\n</code></pre></p>"},{"location":"getting-started/first-prediction/#understanding-the-data-format","title":"Understanding the Data Format","text":"<p>The sample data includes these key parameters:</p> Parameter Unit Range Description <code>mold_temperature</code> \u00b0C 1500-1550 Steel temperature in mold <code>mold_level</code> mm 140-160 Steel level in mold <code>casting_speed</code> m/min 0.8-1.5 Speed of continuous casting <code>cooling_water_flow</code> L/min 180-220 Cooling water flow rate <code>superheat</code> \u00b0C 20-35 Temperature above liquidus"},{"location":"getting-started/first-prediction/#running-a-prediction","title":"Running a Prediction","text":""},{"location":"getting-started/first-prediction/#single-prediction","title":"Single Prediction","text":"<p>Make a prediction for current sensor readings:</p> <pre><code>from src.inference.prediction_engine import PredictionEngine\n\n# Initialize prediction engine\nengine = PredictionEngine()\n\n# Sample sensor readings\nsensor_data = {\n    \"mold_temperature\": 1525.0,\n    \"mold_level\": 152.5,\n    \"casting_speed\": 1.1,\n    \"cooling_water_flow\": 195.0,\n    \"superheat\": 27.0,\n    \"cast_id\": \"DEMO_CAST_001\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n\n# Make prediction\nresult = engine.predict(sensor_data)\nprint(\"Prediction Result:\")\nprint(result)\n</code></pre>"},{"location":"getting-started/first-prediction/#batch-predictions","title":"Batch Predictions","text":"<p>Process multiple readings at once:</p> <pre><code># Load multiple readings\nreadings = connector.get_latest_readings(limit=10)\n\n# Make batch predictions\nbatch_results = engine.predict_batch(readings.to_dict('records'))\n\nprint(f\"Processed {len(batch_results)} predictions\")\nfor i, result in enumerate(batch_results[:3]):  # Show first 3\n    print(f\"Prediction {i+1}: {result['defect_probability']:.3f}\")\n</code></pre>"},{"location":"getting-started/first-prediction/#understanding-the-output","title":"Understanding the Output","text":""},{"location":"getting-started/first-prediction/#prediction-structure","title":"Prediction Structure","text":"<p>Each prediction returns a structured result:</p> <pre><code>{\n    \"prediction_id\": \"pred_abc123def456\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"cast_id\": \"DEMO_CAST_001\",\n    \"defect_probability\": 0.15,           # 0-1 scale (0=good, 1=defect)\n    \"confidence_score\": 0.89,             # Model confidence\n    \"model_predictions\": {                # Individual model results\n        \"baseline_xgboost\": {\n            \"probability\": 0.12,\n            \"confidence\": 0.87,\n            \"features_used\": 25\n        },\n        \"lstm_sequence\": {\n            \"probability\": 0.18,\n            \"confidence\": 0.91,\n            \"sequence_length\": 60\n        },\n        \"ensemble\": {\n            \"probability\": 0.15,\n            \"confidence\": 0.89,\n            \"weights\": {\"baseline\": 0.4, \"lstm\": 0.6}\n        }\n    },\n    \"alert_level\": \"low\",                 # low, medium, high\n    \"risk_factors\": [                     # Contributing factors\n        {\n            \"factor\": \"temperature_variance\",\n            \"impact\": 0.08,\n            \"description\": \"Temperature fluctuation detected\"\n        }\n    ]\n}\n</code></pre>"},{"location":"getting-started/first-prediction/#interpreting-defect-probability","title":"Interpreting Defect Probability","text":"Range Alert Level Interpretation Action 0.0 - 0.3 Low Good quality expected Continue normal operation 0.3 - 0.7 Medium Moderate risk Monitor closely 0.7 - 1.0 High High defect risk Consider intervention"},{"location":"getting-started/first-prediction/#understanding-confidence-scores","title":"Understanding Confidence Scores","text":"<ul> <li>High Confidence (&gt;0.8): Model is very certain about prediction</li> <li>Medium Confidence (0.6-0.8): Reasonable certainty</li> <li>Low Confidence (&lt;0.6): Model uncertainty, treat with caution</li> </ul>"},{"location":"getting-started/first-prediction/#exploring-the-dashboard","title":"Exploring the Dashboard","text":""},{"location":"getting-started/first-prediction/#launching-the-dashboard","title":"Launching the Dashboard","text":"<p>Start the interactive dashboard:</p> <pre><code>python scripts/run_dashboard.py\n</code></pre> <p>Open your browser to <code>http://localhost:8050</code></p>"},{"location":"getting-started/first-prediction/#dashboard-navigation","title":"Dashboard Navigation","text":"<ol> <li>Real-time Monitoring</li> <li>Live sensor readings</li> <li>Current predictions</li> <li> <p>Alert status</p> </li> <li> <p>Model Comparison</p> </li> <li>Performance metrics</li> <li>ROC curves</li> <li> <p>Feature importance</p> </li> <li> <p>Historical Analysis</p> </li> <li>Trend analysis</li> <li>Statistical summaries</li> <li>Pattern recognition</li> </ol>"},{"location":"getting-started/first-prediction/#making-dashboard-predictions","title":"Making Dashboard Predictions","text":"<ol> <li>Navigate to the Real-time Monitoring tab</li> <li>The dashboard automatically shows live predictions</li> <li>Observe the prediction probability gauge</li> <li>Check alert indicators in the top panel</li> </ol>"},{"location":"getting-started/first-prediction/#interactive-features","title":"Interactive Features","text":"<p>Try these dashboard features:</p> <ul> <li>Time Range Selection: Change the analysis period</li> <li>Model Toggle: Compare different model outputs</li> <li>Export Data: Download results as CSV</li> <li>Alert Configuration: Set custom thresholds</li> </ul>"},{"location":"getting-started/first-prediction/#advanced-usage","title":"Advanced Usage","text":""},{"location":"getting-started/first-prediction/#custom-sensor-data","title":"Custom Sensor Data","text":"<p>Create your own sensor readings:</p> <pre><code>custom_data = {\n    \"mold_temperature\": 1530.0,    # Higher temperature\n    \"mold_level\": 145.0,           # Lower level\n    \"casting_speed\": 1.4,          # Faster speed\n    \"cooling_water_flow\": 210.0,   # Higher flow\n    \"superheat\": 30.0,             # Higher superheat\n}\n\nprediction = engine.predict(custom_data)\nprint(f\"Defect probability: {prediction['defect_probability']:.3f}\")\nprint(f\"Alert level: {prediction['alert_level']}\")\n</code></pre>"},{"location":"getting-started/first-prediction/#analyzing-risk-factors","title":"Analyzing Risk Factors","text":"<p>Understand what drives the predictions:</p> <pre><code># Get detailed risk analysis\nprediction = engine.predict(sensor_data)\n\nprint(\"Risk Factors:\")\nfor factor in prediction['risk_factors']:\n    print(f\"- {factor['factor']}: {factor['impact']:.3f}\")\n    print(f\"  {factor['description']}\")\n</code></pre>"},{"location":"getting-started/first-prediction/#model-performance-comparison","title":"Model Performance Comparison","text":"<p>Compare how different models perform:</p> <pre><code>from src.visualization.components import ModelComparison\n\n# Load test data\ntest_data = connector.get_test_data()\n\n# Get predictions from all models\nresults = {}\nfor model_name in ['baseline_xgboost', 'lstm_sequence']:\n    model_results = engine.evaluate_model(model_name, test_data)\n    results[model_name] = model_results\n\n# Create comparison\ncomparison = ModelComparison()\ncomparison_chart = comparison.create_roc_curves(results)\ncomparison_chart.show()\n</code></pre>"},{"location":"getting-started/first-prediction/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/first-prediction/#common-issues","title":"Common Issues","text":"<p>Low Confidence Predictions</p> <p>If you see consistently low confidence scores: - Check data quality - Ensure all required sensors are working - Verify timestamp format</p> <p>Unexpected High Defect Probability</p> <p>For surprisingly high defect predictions: - Review sensor readings for outliers - Check if conditions are outside normal ranges - Consider recalibration if readings seem wrong</p>"},{"location":"getting-started/first-prediction/#data-quality-checks","title":"Data Quality Checks","text":"<p>Validate your sensor data:</p> <pre><code>from src.data.data_validation import DataValidator\n\nvalidator = DataValidator()\nquality_report = validator.validate(sensor_data)\n\nif quality_report['is_valid']:\n    print(\"\u2705 Data quality OK\")\nelse:\n    print(\"\u274c Data quality issues:\")\n    for issue in quality_report['issues']:\n        print(f\"- {issue}\")\n</code></pre>"},{"location":"getting-started/first-prediction/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the Development Setup Guide</li> <li>Review System Requirements</li> <li>Examine error logs in the <code>logs/</code> directory</li> <li>Open an issue on GitHub</li> </ol>"},{"location":"getting-started/first-prediction/#next-steps","title":"Next Steps","text":"<p>Now that you've made your first prediction:</p> <ul> <li>Learn More: Read the User Guide</li> <li>Integrate: Explore API Integration</li> <li>Customize: Try the Contributing Guide</li> <li>Contribute: Check the Contributing Guide</li> </ul> <p>Congratulations! \ud83c\udf89 You've successfully made your first steel defect prediction. The system is now ready for more advanced usage and integration into your casting operations.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with the Steel Defect Prediction System in just 5 minutes!</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>At least 4GB RAM</li> <li>Linux, macOS, or Windows with WSL2</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/dhar174/steel_defect_demo.git\ncd steel_defect_demo\n</code></pre>"},{"location":"getting-started/quick-start/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Install core dependencies\npip install -r requirements.txt\n\n# Install the package in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/quick-start/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code># Test the installation\npython demo_model_comparison.py\n</code></pre> <p>You should see output showing model comparison results and charts being generated.</p>"},{"location":"getting-started/quick-start/#your-first-prediction","title":"Your First Prediction","text":""},{"location":"getting-started/quick-start/#option-1-interactive-dashboard","title":"Option 1: Interactive Dashboard","text":"<p>Launch the interactive dashboard to explore the system:</p> <pre><code>python scripts/run_dashboard.py\n</code></pre> <p>Then open your browser to <code>http://localhost:8050</code> to access the dashboard.</p>"},{"location":"getting-started/quick-start/#option-2-command-line-demo","title":"Option 2: Command Line Demo","text":"<p>Run a quick prediction demo:</p> <pre><code># Run model comparison demo\npython demo_model_comparison.py\n\n# Run sensor monitoring demo  \npython demo_sensor_visualization.py\n\n# Run historical analysis demo\npython demo_historical_analysis.py\n</code></pre>"},{"location":"getting-started/quick-start/#understanding-the-output","title":"Understanding the Output","text":""},{"location":"getting-started/quick-start/#model-predictions","title":"Model Predictions","text":"<p>The system provides predictions in this format:</p> <pre><code>{\n    \"cast_id\": \"CAST_20250720_001\",\n    \"defect_probability\": 0.15,\n    \"confidence_score\": 0.89,\n    \"model_predictions\": {\n        \"baseline\": 0.12,\n        \"lstm\": 0.18\n    },\n    \"alert_level\": \"low\",\n    \"timestamp\": \"2025-07-20T22:18:46Z\"\n}\n</code></pre>"},{"location":"getting-started/quick-start/#dashboard-features","title":"Dashboard Features","text":"<p>The dashboard includes:</p> <ul> <li>Real-time Monitoring: Live sensor data and predictions</li> <li>Model Comparison: Side-by-side performance metrics</li> <li>Historical Analysis: Trends and pattern analysis</li> <li>Alert Management: Configure thresholds and notifications</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Once you have the system running:</p> <ol> <li>Explore the Dashboard: Navigate through different monitoring views</li> <li>Review Architecture: Understand the system design</li> <li>Explore Dashboard: Use the dashboard overview</li> <li>Integration: Learn about API integration</li> </ol>"},{"location":"getting-started/quick-start/#sample-data","title":"Sample Data","text":"<p>The system includes synthetic sample data for testing:</p> <ul> <li>Sensor readings: Temperature, pressure, flow rates</li> <li>Cast parameters: Speed, superheat, mold level</li> <li>Quality outcomes: Defect classifications and probabilities</li> </ul>"},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/quick-start/#installation-problems","title":"Installation Problems","text":"<p>Module Import Errors</p> <p>If you encounter import errors, ensure you've installed the package in development mode: <pre><code>pip install -e .\n</code></pre></p> <p>Missing Dependencies</p> <p>Some demos require additional packages. Install documentation dependencies: <pre><code>pip install -r requirements-docs.txt\n</code></pre></p>"},{"location":"getting-started/quick-start/#performance-tips","title":"Performance Tips","text":"<ul> <li>Use at least 4GB RAM for optimal performance</li> <li>LSTM model training requires more memory than baseline models</li> <li>Dashboard responsiveness improves with faster internet for plot rendering</li> </ul>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Check the Development Setup Guide</li> <li>Review System Requirements</li> <li>Browse the User Guide</li> <li>Open an issue for bugs</li> </ul> <p>Congratulations! \ud83c\udf89 You now have the Steel Defect Prediction System running. Continue to the Dashboard Overview to learn about all available features.</p>"},{"location":"getting-started/system-requirements/","title":"System Requirements","text":"<p>This page outlines the hardware and software requirements for running the Steel Defect Prediction System in different environments.</p>"},{"location":"getting-started/system-requirements/#minimum-requirements","title":"Minimum Requirements","text":""},{"location":"getting-started/system-requirements/#hardware","title":"Hardware","text":"Component Minimum Recommended Notes CPU 2 cores 4+ cores Multi-core improves model training performance RAM 4GB 8GB+ LSTM training requires more memory Storage 2GB 10GB+ Includes models, data, and logs Network 1 Mbps 10+ Mbps For dashboard and data streaming"},{"location":"getting-started/system-requirements/#software","title":"Software","text":"Requirement Version Purpose Python 3.8+ Core runtime (3.9-3.11 recommended) pip 20.0+ Package management Git 2.0+ Version control and installation"},{"location":"getting-started/system-requirements/#production-requirements","title":"Production Requirements","text":""},{"location":"getting-started/system-requirements/#hardware-production","title":"Hardware (Production)","text":"Component Minimum Recommended High-Performance CPU 4 cores 8+ cores 16+ cores RAM 8GB 16GB+ 32GB+ Storage 50GB SSD 100GB SSD 500GB+ NVMe Network 10 Mbps 100 Mbps 1 Gbps GPU None NVIDIA GPU Tesla/A100 for training"},{"location":"getting-started/system-requirements/#software-stack","title":"Software Stack","text":""},{"location":"getting-started/system-requirements/#operating-systems","title":"Operating Systems","text":"Linux (Recommended)macOSWindows <ul> <li>Ubuntu: 20.04 LTS, 22.04 LTS</li> <li>CentOS: 7, 8</li> <li>RHEL: 7, 8, 9</li> <li>Debian: 10, 11</li> </ul> <ul> <li>macOS: 10.15+ (Catalina or newer)</li> <li>Architecture: Intel x64 or Apple Silicon (M1/M2)</li> </ul> <ul> <li>Windows: 10, 11 </li> <li>WSL2: Required for full compatibility</li> <li>Docker Desktop: Recommended for containerization</li> </ul>"},{"location":"getting-started/system-requirements/#python-environment","title":"Python Environment","text":"<pre><code># Recommended Python version\nPython 3.9.7+\n\n# Virtual environment (recommended)\npython -m venv steel_defect_env\nsource steel_defect_env/bin/activate  # Linux/macOS\n# steel_defect_env\\Scripts\\activate   # Windows\n</code></pre>"},{"location":"getting-started/system-requirements/#development-environment","title":"Development Environment","text":""},{"location":"getting-started/system-requirements/#ide-support","title":"IDE Support","text":"IDE Support Level Notes VS Code \u2705 Excellent Recommended, includes .vscode config PyCharm \u2705 Excellent Professional or Community Jupyter \u2705 Good For notebooks and experimentation Vim/Neovim \u2705 Good With Python LSP"},{"location":"getting-started/system-requirements/#development-tools","title":"Development Tools","text":"<pre><code># Code formatting and linting\npip install black flake8 mypy\n\n# Testing framework\npip install pytest pytest-cov\n\n# Documentation\npip install -r requirements-docs.txt\n</code></pre>"},{"location":"getting-started/system-requirements/#browser-requirements","title":"Browser Requirements","text":""},{"location":"getting-started/system-requirements/#dashboard-access","title":"Dashboard Access","text":"Browser Version Support Level Chrome 90+ \u2705 Recommended Firefox 88+ \u2705 Full support Safari 14+ \u2705 Full support Edge 90+ \u2705 Full support"},{"location":"getting-started/system-requirements/#features-used","title":"Features Used","text":"<ul> <li>JavaScript: ES6+ features</li> <li>WebSockets: For real-time updates</li> <li>Local Storage: For user preferences</li> <li>Canvas/SVG: For interactive charts</li> </ul>"},{"location":"getting-started/system-requirements/#network-requirements","title":"Network Requirements","text":""},{"location":"getting-started/system-requirements/#ports","title":"Ports","text":"Port Protocol Purpose Required 8050 HTTP Dashboard interface Yes 8051 HTTP API endpoints Optional 5432 TCP PostgreSQL (if used) Optional 6379 TCP Redis (if used) Optional"},{"location":"getting-started/system-requirements/#firewall-configuration","title":"Firewall Configuration","text":"DevelopmentProduction <pre><code># Allow dashboard access\nsudo ufw allow 8050/tcp\n</code></pre> <pre><code># More restrictive rules\nsudo ufw allow from 10.0.0.0/8 to any port 8050\nsudo ufw allow from 172.16.0.0/12 to any port 8050\nsudo ufw allow from 192.168.0.0/16 to any port 8050\n</code></pre>"},{"location":"getting-started/system-requirements/#dependencies","title":"Dependencies","text":""},{"location":"getting-started/system-requirements/#core-dependencies","title":"Core Dependencies","text":"<pre><code># Data processing\npandas&gt;=1.5.0\nnumpy&gt;=1.23.0\npyarrow&gt;=10.0.0\n\n# Machine learning\nscikit-learn&gt;=1.1.0\nxgboost&gt;=1.7.0\ntorch&gt;=1.13.0\n\n# Visualization\nplotly&gt;=5.15.0\ndash&gt;=3.0.0\nmatplotlib&gt;=3.6.0\n</code></pre>"},{"location":"getting-started/system-requirements/#optional-dependencies","title":"Optional Dependencies","text":"<pre><code># GPU acceleration (CUDA)\ntorch[cuda]  # For NVIDIA GPUs\n\n# Database connectors\npsycopg2&gt;=2.9.0  # PostgreSQL\nredis&gt;=4.3.0     # Redis cache\n\n# Production monitoring\nprometheus-client&gt;=0.14.0\n</code></pre>"},{"location":"getting-started/system-requirements/#performance-benchmarks","title":"Performance Benchmarks","text":""},{"location":"getting-started/system-requirements/#model-training-time","title":"Model Training Time","text":"Model Type Dataset Size CPU (4 cores) GPU (CUDA) XGBoost 10K samples 30 seconds N/A LSTM 10K sequences 5 minutes 1 minute Ensemble 50K samples 15 minutes 3 minutes"},{"location":"getting-started/system-requirements/#memory-usage","title":"Memory Usage","text":"Component Baseline Peak Notes Dashboard 200MB 500MB Depends on data volume XGBoost Training 300MB 1GB Scales with features LSTM Training 500MB 2GB Scales with sequence length"},{"location":"getting-started/system-requirements/#cloud-deployment","title":"Cloud Deployment","text":""},{"location":"getting-started/system-requirements/#aws-requirements","title":"AWS Requirements","text":"<pre><code># Minimum EC2 instance\nInstance: t3.medium\nvCPUs: 2\nRAM: 4GB\nStorage: 20GB GP2\n\n# Recommended EC2 instance  \nInstance: c5.xlarge\nvCPUs: 4\nRAM: 8GB\nStorage: 50GB GP3\n</code></pre>"},{"location":"getting-started/system-requirements/#docker-requirements","title":"Docker Requirements","text":"<pre><code># Base requirements\nFROM python:3.9-slim\n\n# System packages\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Memory limits\n--memory=2g\n--memory-swap=4g\n</code></pre>"},{"location":"getting-started/system-requirements/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/system-requirements/#common-issues","title":"Common Issues","text":"<p>Memory Errors</p> <p>If you encounter out-of-memory errors: - Increase system RAM or swap - Reduce batch size for LSTM training - Use data streaming for large datasets</p> <p>Performance Issues</p> <p>For slow performance: - Check CPU usage and available cores - Monitor memory usage - Consider GPU acceleration for training</p> <p>Installation Failures</p> <p>For package installation issues: - Update pip: <code>pip install --upgrade pip</code> - Use virtual environment - Check Python version compatibility</p>"},{"location":"getting-started/system-requirements/#verification-commands","title":"Verification Commands","text":"<pre><code># Check Python version\npython --version\n\n# Verify installation\npython -c \"import steel_defect_demo; print('Installation OK')\"\n\n# Check memory and CPU\npython -c \"import psutil; print(f'RAM: {psutil.virtual_memory().total//1e9:.1f}GB')\"\npython -c \"import os; print(f'CPU cores: {os.cpu_count()}')\"\n\n# Test GPU (if available)\npython -c \"import torch; print(f'CUDA available: {torch.cuda.is_available()}')\"\n</code></pre> <p>Next: Development Setup \u2192</p>"},{"location":"installation/development-setup/","title":"Development Setup Guide","text":"<p>This guide walks you through setting up a complete development environment for the Steel Defect Prediction System.</p>"},{"location":"installation/development-setup/#quick-setup","title":"Quick Setup","text":"<p>For experienced developers who want to get started immediately:</p> <pre><code># Clone and setup\ngit clone https://github.com/dhar174/steel_defect_demo.git\ncd steel_defect_demo\npython -m venv venv &amp;&amp; source venv/bin/activate\npip install -e . &amp;&amp; pip install -r requirements-docs.txt\npython demo_model_comparison.py  # Verify installation\n</code></pre>"},{"location":"installation/development-setup/#detailed-setup-instructions","title":"Detailed Setup Instructions","text":""},{"location":"installation/development-setup/#1-system-prerequisites","title":"1. System Prerequisites","text":"<p>Ensure you have these installed:</p> <ul> <li>Python 3.8+ (3.9-3.11 recommended)</li> <li>Git for version control</li> <li>Virtual environment tool (venv, conda, virtualenv)</li> </ul>"},{"location":"installation/development-setup/#platform-specific-requirements","title":"Platform-Specific Requirements","text":"Linux (Ubuntu/Debian)macOSWindows <pre><code># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install development tools\nsudo apt install -y python3 python3-pip python3-venv git build-essential\n\n# Install optional dependencies\nsudo apt install -y python3-dev libffi-dev libssl-dev\n</code></pre> <pre><code># Install Homebrew (if not installed)\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Python and Git\nbrew install python git\n\n# Install development tools\nxcode-select --install\n</code></pre> <pre><code># Using Chocolatey package manager\n# Install Chocolatey first from https://chocolatey.org/install\n\nchoco install python git\n\n# Or download installers from:\n# Python: https://python.org/downloads/\n# Git: https://git-scm.com/download/win\n</code></pre>"},{"location":"installation/development-setup/#2-clone-repository","title":"2. Clone Repository","text":"<pre><code># Clone the repository\ngit clone https://github.com/dhar174/steel_defect_demo.git\ncd steel_defect_demo\n\n# Verify repository structure\nls -la\n</code></pre> <p>Expected structure: <pre><code>steel_defect_demo/\n\u251c\u2500\u2500 src/                    # Source code\n\u251c\u2500\u2500 tests/                  # Test suite\n\u251c\u2500\u2500 docs_site/             # Documentation\n\u251c\u2500\u2500 data/                  # Sample data\n\u251c\u2500\u2500 configs/               # Configuration files\n\u251c\u2500\u2500 requirements.txt       # Dependencies\n\u251c\u2500\u2500 setup.py              # Package setup\n\u2514\u2500\u2500 README.md             # Project overview\n</code></pre></p>"},{"location":"installation/development-setup/#3-virtual-environment-setup","title":"3. Virtual Environment Setup","text":"<p>Choose your preferred virtual environment tool:</p> venv (Recommended)condavirtualenv <pre><code># Create virtual environment\npython -m venv steel_defect_env\n\n# Activate virtual environment\n# Linux/macOS:\nsource steel_defect_env/bin/activate\n\n# Windows:\n# steel_defect_env\\Scripts\\activate\n\n# Verify activation\nwhich python  # Should point to venv\n</code></pre> <pre><code># Create conda environment\nconda create -n steel_defect_env python=3.9\n\n# Activate environment\nconda activate steel_defect_env\n\n# Verify activation\nconda info --envs\n</code></pre> <pre><code># Install virtualenv if needed\npip install virtualenv\n\n# Create virtual environment\nvirtualenv steel_defect_env\n\n# Activate environment\nsource steel_defect_env/bin/activate  # Linux/macOS\n# steel_defect_env\\Scripts\\activate   # Windows\n</code></pre>"},{"location":"installation/development-setup/#4-install-dependencies","title":"4. Install Dependencies","text":"<pre><code># Upgrade pip\npip install --upgrade pip\n\n# Install the package in development mode\npip install -e .\n\n# Install documentation dependencies\npip install -r requirements-docs.txt\n\n# Install development tools (optional but recommended)\npip install black flake8 pytest mypy pre-commit\n</code></pre>"},{"location":"installation/development-setup/#optional-gpu-support","title":"Optional: GPU Support","text":"<p>For LSTM model training with GPU acceleration:</p> <pre><code># CUDA 11.x\npip install torch torchvision --index-url https://download.pytorch.org/whl/cu118\n\n# CUDA 12.x\npip install torch torchvision --index-url https://download.pytorch.org/whl/cu121\n\n# Verify GPU support\npython -c \"import torch; print(f'CUDA available: {torch.cuda.is_available()}')\"\n</code></pre>"},{"location":"installation/development-setup/#5-verify-installation","title":"5. Verify Installation","text":"<p>Run these verification steps:</p> <pre><code># Test basic imports\npython -c \"import src; print('\u2705 Package imports successfully')\"\n\n# Run a simple demo\npython demo_model_comparison.py\n\n# Run basic tests\npython -m pytest tests/ -v --tb=short\n\n# Build documentation\nmkdocs build\n</code></pre> <p>Expected output indicates successful setup: <pre><code>\u2705 Package imports successfully\n\ud83d\ude80 ModelComparison Component Demo\n==================================================\n\u2705 All individual components demonstrated successfully!\n</code></pre></p>"},{"location":"installation/development-setup/#6-ide-configuration","title":"6. IDE Configuration","text":""},{"location":"installation/development-setup/#vs-code-setup","title":"VS Code Setup","text":"<p>Create <code>.vscode/settings.json</code>:</p> <pre><code>{\n    \"python.defaultInterpreterPath\": \"./steel_defect_env/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.flake8Enabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.formatting.blackArgs\": [\"--line-length\", \"88\"],\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.pytestArgs\": [\"tests\"],\n    \"files.exclude\": {\n        \"**/__pycache__\": true,\n        \"**/*.pyc\": true,\n        \"steel_defect_env/\": true,\n        \"site/\": true\n    }\n}\n</code></pre> <p>Create <code>.vscode/launch.json</code> for debugging:</p> <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Run Dashboard\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/scripts/run_dashboard.py\",\n            \"console\": \"integratedTerminal\",\n            \"cwd\": \"${workspaceFolder}\"\n        },\n        {\n            \"name\": \"Run Demo\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/demo_model_comparison.py\",\n            \"console\": \"integratedTerminal\",\n            \"cwd\": \"${workspaceFolder}\"\n        }\n    ]\n}\n</code></pre>"},{"location":"installation/development-setup/#pycharm-setup","title":"PyCharm Setup","text":"<ol> <li>Open Project: File \u2192 Open \u2192 Select <code>steel_defect_demo</code> folder</li> <li>Configure Interpreter: Settings \u2192 Python Interpreter \u2192 Add \u2192 Existing Environment \u2192 Select <code>steel_defect_env/bin/python</code></li> <li>Enable Tools: Settings \u2192 Tools \u2192 Enable pytest, Black formatter</li> <li>Mark Source Root: Right-click <code>src</code> folder \u2192 Mark Directory As \u2192 Sources Root</li> </ol>"},{"location":"installation/development-setup/#7-development-tools-setup","title":"7. Development Tools Setup","text":""},{"location":"installation/development-setup/#pre-commit-hooks-recommended","title":"Pre-commit Hooks (Recommended)","text":"<pre><code># Install pre-commit\npip install pre-commit\n\n# Install git hooks\npre-commit install\n\n# Test hooks\npre-commit run --all-files\n</code></pre> <p>Create <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: https://github.com/psf/black\n    rev: '22.10.0'\n    hooks:\n      - id: black\n        language_version: python3\n\n  - repo: https://github.com/pycqa/flake8\n    rev: '5.0.4'\n    hooks:\n      - id: flake8\n        args: ['--max-line-length=88', '--extend-ignore=E203,W503']\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: 'v0.991'\n    hooks:\n      - id: mypy\n        additional_dependencies: [types-all]\n</code></pre>"},{"location":"installation/development-setup/#code-quality-tools","title":"Code Quality Tools","text":"<pre><code># Format code\nblack .\n\n# Check code style\nflake8 .\n\n# Type checking\nmypy src/\n\n# Security analysis\npip install bandit\nbandit -r src/\n</code></pre>"},{"location":"installation/development-setup/#8-database-setup-optional","title":"8. Database Setup (Optional)","text":"<p>For advanced features requiring database:</p> <pre><code># Install database dependencies\npip install psycopg2-binary  # PostgreSQL\npip install redis            # Redis cache\n\n# Setup PostgreSQL (Ubuntu/Debian)\nsudo apt install postgresql postgresql-contrib\nsudo -u postgres createdb steel_defect_db\n\n# Setup Redis\nsudo apt install redis-server\nredis-cli ping  # Should return \"PONG\"\n</code></pre>"},{"location":"installation/development-setup/#development-workflow","title":"Development Workflow","text":""},{"location":"installation/development-setup/#daily-development","title":"Daily Development","text":"<pre><code># Activate environment\nsource steel_defect_env/bin/activate\n\n# Pull latest changes\ngit pull origin main\n\n# Install new dependencies (if any)\npip install -e .\n\n# Run tests before starting work\npytest tests/\n\n# Start development server\npython scripts/run_dashboard.py\n</code></pre>"},{"location":"installation/development-setup/#code-development-cycle","title":"Code Development Cycle","text":"<ol> <li> <p>Create Feature Branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Write Code and Tests <pre><code># Edit code in src/\n# Add tests in tests/\n</code></pre></p> </li> <li> <p>Test Changes <pre><code># Run tests\npytest tests/\n\n# Check code quality\nblack .\nflake8 .\n</code></pre></p> </li> <li> <p>Commit Changes <pre><code>git add .\ngit commit -m \"feat: add your feature description\"\n</code></pre></p> </li> <li> <p>Push and Create PR <pre><code>git push origin feature/your-feature-name\n# Create pull request on GitHub\n</code></pre></p> </li> </ol>"},{"location":"installation/development-setup/#documentation-development","title":"Documentation Development","text":"<pre><code># Start documentation server\nmkdocs serve\n\n# Edit documentation files in docs_site/\n# Changes automatically reload in browser\n\n# Build for production\nmkdocs build\n</code></pre>"},{"location":"installation/development-setup/#testing","title":"Testing","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/unit/test_models/test_baseline_model.py\n\n# Run with coverage\npytest --cov=src --cov-report=html\n\n# Run integration tests\npytest tests/integration/\n</code></pre>"},{"location":"installation/development-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/development-setup/#common-issues","title":"Common Issues","text":"<p>Import Errors</p> <pre><code># If you get import errors, ensure package is installed in development mode\npip install -e .\n\n# Check Python path\npython -c \"import sys; print('\\n'.join(sys.path))\"\n</code></pre> <p>Permission Errors</p> <pre><code># Linux/macOS permission issues\nsudo chown -R $USER:$USER steel_defect_demo/\n\n# Windows permission issues\n# Run command prompt as administrator\n</code></pre> <p>Memory Issues</p> <pre><code># For large datasets or LSTM training\nexport PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512\n\n# Or reduce batch size in training configs\n</code></pre>"},{"location":"installation/development-setup/#environment-issues","title":"Environment Issues","text":"<pre><code># Reset virtual environment\ndeactivate\nrm -rf steel_defect_env/\npython -m venv steel_defect_env\nsource steel_defect_env/bin/activate\npip install -e .\n</code></pre>"},{"location":"installation/development-setup/#package-conflicts","title":"Package Conflicts","text":"<pre><code># Check installed packages\npip list\n\n# Check for conflicts\npip check\n\n# Create requirements.txt from current environment\npip freeze &gt; requirements-current.txt\n</code></pre>"},{"location":"installation/development-setup/#performance-optimization","title":"Performance Optimization","text":""},{"location":"installation/development-setup/#development-performance","title":"Development Performance","text":"<ul> <li>Use SSD storage for faster file operations</li> <li>Allocate sufficient RAM (8GB+ recommended)</li> <li>Enable GPU for LSTM training if available</li> <li>Use pytest-xdist for parallel test execution:   <pre><code>pip install pytest-xdist\npytest -n auto  # Run tests in parallel\n</code></pre></li> </ul>"},{"location":"installation/development-setup/#ide-performance","title":"IDE Performance","text":"<ul> <li>Exclude build directories from indexing</li> <li>Disable unnecessary plugins</li> <li>Use type hints for better IntelliSense</li> <li>Configure code completion for faster responses</li> </ul>"},{"location":"installation/development-setup/#next-steps","title":"Next Steps","text":"<p>Once your development environment is ready:</p> <ol> <li>Explore the Architecture: Review System Overview</li> <li>Understand the Dashboard: Read Dashboard Overview</li> <li>Learn the API: Check Dashboard Integration</li> <li>Start Contributing: See Contributing Guide</li> </ol> <p>Congratulations! \ud83c\udf89 Your development environment is now ready. You can start developing, testing, and contributing to the Steel Defect Prediction System.</p>"},{"location":"releases/changelog/","title":"Changelog","text":"<p>All notable changes to the Steel Defect Prediction System will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"releases/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"releases/changelog/#added","title":"Added","text":"<ul> <li>Comprehensive documentation system with MkDocs</li> <li>Interactive API documentation</li> <li>Architecture diagrams with Mermaid</li> <li>Contributing guidelines for developers</li> </ul>"},{"location":"releases/changelog/#changed","title":"Changed","text":"<ul> <li>Enhanced documentation structure</li> <li>Improved code organization</li> </ul>"},{"location":"releases/changelog/#fixed","title":"Fixed","text":"<ul> <li>Documentation build warnings</li> <li>Missing dependency specifications</li> </ul>"},{"location":"releases/changelog/#010-2024-01-20","title":"[0.1.0] - 2024-01-20","text":""},{"location":"releases/changelog/#added_1","title":"Added","text":"<ul> <li>Initial Release \ud83c\udf89</li> <li>Complete steel casting defect prediction system</li> <li>Machine Learning Models:</li> <li>XGBoost baseline model with feature engineering</li> <li>LSTM deep learning model for sequence analysis</li> <li>Ensemble modeling combining multiple approaches</li> <li>Interactive Dashboard:</li> <li>Real-time monitoring interface</li> <li>Model performance comparison</li> <li>Historical data analysis</li> <li>Alert management system</li> <li>Data Pipeline:</li> <li>Synthetic data generation for testing</li> <li>Data quality assessment tools</li> <li>Feature engineering pipeline</li> <li>Data validation and preprocessing</li> <li>Visualization Components:</li> <li>Real-time sensor monitoring</li> <li>Prediction display with confidence intervals</li> <li>Model comparison charts (ROC, PR curves)</li> <li>Feature importance visualization</li> <li>Alert management interface</li> <li>Analysis Tools:</li> <li>Statistical analysis capabilities</li> <li>Correlation analysis</li> <li>Historical trend analysis</li> <li>Performance monitoring</li> <li>Integration Features:</li> <li>Modular component architecture</li> <li>Python API for programmatic access</li> <li>Dashboard callback system</li> <li>Configurable alert thresholds</li> </ul>"},{"location":"releases/changelog/#technical-specifications","title":"Technical Specifications","text":"<ul> <li>Language: Python 3.8+</li> <li>ML Framework: XGBoost, PyTorch, scikit-learn</li> <li>Web Framework: Dash (Plotly) with Bootstrap</li> <li>Data Processing: pandas, NumPy, PyArrow</li> <li>Visualization: Plotly, matplotlib, seaborn</li> <li>Testing: pytest with comprehensive test suite</li> </ul>"},{"location":"releases/changelog/#key-features","title":"Key Features","text":"<ul> <li>Real-time Prediction: Sub-second inference on streaming data</li> <li>Multi-model Ensemble: Combines baseline and deep learning approaches</li> <li>Interactive Dashboard: Responsive web interface for monitoring</li> <li>Comprehensive Analytics: Statistical analysis and trend detection</li> <li>Modular Architecture: Reusable components for easy integration</li> <li>Quality Monitoring: Built-in data quality assessment</li> <li>Alert System: Configurable thresholds and notifications</li> </ul>"},{"location":"releases/changelog/#demo-components","title":"Demo Components","text":"<ul> <li>Model comparison demonstrations</li> <li>Sensor monitoring examples</li> <li>Historical analysis workflows</li> <li>Alert management scenarios</li> <li>Integration examples</li> </ul>"},{"location":"releases/changelog/#documentation","title":"Documentation","text":"<ul> <li>User guides and tutorials</li> <li>API documentation</li> <li>Installation instructions</li> <li>Development guidelines</li> <li>Architecture documentation</li> </ul>"},{"location":"releases/changelog/#version-history-summary","title":"Version History Summary","text":"Version Release Date Key Features 0.1.0 2024-01-20 Initial release with ML models, dashboard, and analytics"},{"location":"releases/changelog/#upgrade-guide","title":"Upgrade Guide","text":""},{"location":"releases/changelog/#from-development-to-010","title":"From Development to 0.1.0","text":"<p>This is the initial release. No upgrade procedures needed.</p>"},{"location":"releases/changelog/#future-upgrades","title":"Future Upgrades","text":"<p>Migration guides will be provided for future versions that introduce breaking changes.</p>"},{"location":"releases/changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"releases/changelog/#010","title":"0.1.0","text":"<ul> <li>No breaking changes (initial release)</li> </ul>"},{"location":"releases/changelog/#security-updates","title":"Security Updates","text":""},{"location":"releases/changelog/#010_1","title":"0.1.0","text":"<ul> <li>Initial security implementation</li> <li>Input validation for all user data</li> <li>Safe handling of file operations</li> <li>Configurable access controls</li> </ul>"},{"location":"releases/changelog/#performance-improvements","title":"Performance Improvements","text":""},{"location":"releases/changelog/#010_2","title":"0.1.0","text":"<ul> <li>Optimized model inference pipeline</li> <li>Efficient data processing with vectorized operations</li> <li>Cached model loading for faster startup</li> <li>Responsive dashboard with lazy loading</li> </ul>"},{"location":"releases/changelog/#bug-fixes","title":"Bug Fixes","text":""},{"location":"releases/changelog/#010_3","title":"0.1.0","text":"<ul> <li>No bug fixes (initial release)</li> </ul>"},{"location":"releases/changelog/#deprecated-features","title":"Deprecated Features","text":""},{"location":"releases/changelog/#010_4","title":"0.1.0","text":"<ul> <li>No deprecated features (initial release)</li> </ul>"},{"location":"releases/changelog/#known-issues","title":"Known Issues","text":""},{"location":"releases/changelog/#010_5","title":"0.1.0","text":"<ul> <li>Dashboard may require manual refresh in some browsers</li> <li>Large datasets (&gt;100k samples) may impact performance</li> <li>LSTM training requires significant memory for long sequences</li> </ul>"},{"location":"releases/changelog/#planned-features","title":"Planned Features","text":""},{"location":"releases/changelog/#future-releases","title":"Future Releases","text":"<ul> <li>Enhanced Models:</li> <li>Transformer-based sequence models</li> <li>AutoML for automatic model selection</li> <li> <p>Continuous learning capabilities</p> </li> <li> <p>Advanced Analytics:</p> </li> <li>Anomaly detection algorithms</li> <li>Predictive maintenance features</li> <li> <p>Advanced statistical analysis</p> </li> <li> <p>Integration Improvements:</p> </li> <li>REST API endpoints</li> <li>Database connectors for production systems</li> <li> <p>Real-time streaming data support</p> </li> <li> <p>User Experience:</p> </li> <li>Mobile-responsive dashboard</li> <li>Custom dashboard creation</li> <li> <p>Advanced visualization options</p> </li> <li> <p>Production Features:</p> </li> <li>Model versioning and rollback</li> <li>A/B testing framework</li> <li>Advanced monitoring and logging</li> </ul>"},{"location":"releases/changelog/#contributing","title":"Contributing","text":"<p>See Contributing Guide for information on how to contribute to this project.</p>"},{"location":"releases/changelog/#support","title":"Support","text":"<ul> <li>Documentation: Browse this comprehensive guide</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul> <p>For detailed technical changes, see the Git commit history.</p> <ul> <li>Initial documentation site structure</li> <li>Markdownlint compliance for all documentation files</li> <li>Comprehensive user guide for dashboard interface</li> </ul>"},{"location":"releases/changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved code organization and documentation standards</li> <li>Enhanced error handling in prediction pipeline</li> </ul>"},{"location":"releases/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Resolved markdownlint formatting issues in documentation</li> <li>Fixed compatibility issues with latest dependencies</li> </ul>"},{"location":"releases/changelog/#100-2024-07-22","title":"[1.0.0] - 2024-07-22","text":""},{"location":"releases/changelog/#features-added","title":"Features Added","text":"<ul> <li>LSTM-based defect prediction model</li> <li>Baseline statistical model for comparison</li> <li>Real-time dashboard interface</li> <li>Alert management system</li> <li>Historical data analysis capabilities</li> <li>Sensor data visualization components</li> <li>Integration with continuous casting equipment</li> <li>Comprehensive test suite</li> <li>API documentation</li> <li>User guides and technical documentation</li> </ul>"},{"location":"releases/changelog/#core-features","title":"Core Features","text":"<ul> <li>Machine Learning Models</li> <li>LSTM neural network for time-series prediction</li> <li>Gradient boosting baseline model</li> <li> <p>Model comparison and evaluation tools</p> </li> <li> <p>Dashboard Interface</p> </li> <li>Real-time monitoring displays</li> <li>Interactive charts and visualizations</li> <li>Alert status and management</li> <li> <p>Historical trend analysis</p> </li> <li> <p>Data Processing</p> </li> <li>Automated data quality assessment</li> <li>Feature engineering pipeline</li> <li>Real-time data ingestion</li> <li> <p>Statistical analysis tools</p> </li> <li> <p>System Integration</p> </li> <li>PLC connectivity for industrial systems</li> <li>REST API for external integrations</li> <li>Configurable alert thresholds</li> <li>Export capabilities for reports</li> </ul>"},{"location":"releases/changelog/#technical-specifications_1","title":"Technical Specifications","text":"<ul> <li>Python 3.8+ compatibility</li> <li>PyTorch for deep learning models</li> <li>Streamlit for dashboard interface</li> <li>Pandas for data manipulation</li> <li>Comprehensive logging and monitoring</li> </ul>"},{"location":"releases/changelog/#090-2024-07-15","title":"[0.9.0] - 2024-07-15","text":""},{"location":"releases/changelog/#initial-development","title":"Initial Development","text":"<ul> <li>Initial project structure</li> <li>Basic model training scripts</li> <li>Data preprocessing utilities</li> <li>Initial dashboard prototype</li> </ul>"},{"location":"releases/changelog/#improvements","title":"Improvements","text":"<ul> <li>Refactored code organization</li> <li>Improved data loading performance</li> </ul>"},{"location":"releases/changelog/#010-2024-07-01","title":"[0.1.0] - 2024-07-01","text":""},{"location":"releases/changelog/#project-initialization","title":"Project Initialization","text":"<ul> <li>Project initialization</li> <li>Basic documentation</li> <li>Initial development environment setup</li> </ul>"},{"location":"user-guide/dashboard-overview/","title":"Dashboard Overview","text":"<p>The Steel Defect Prediction System dashboard provides a comprehensive real-time monitoring interface for steel casting operations. This guide walks you through all major features and components.</p>"},{"location":"user-guide/dashboard-overview/#dashboard-access","title":"Dashboard Access","text":"<p>The dashboard is accessible at <code>http://localhost:8050</code> when running locally, or at your configured production URL.</p> <pre><code># Start the dashboard\npython scripts/run_dashboard.py\n</code></pre>"},{"location":"user-guide/dashboard-overview/#main-interface-layout","title":"Main Interface Layout","text":"<p>The dashboard is organized into several key sections:</p>"},{"location":"user-guide/dashboard-overview/#navigation-bar","title":"Navigation Bar","text":"<p>The top navigation provides access to all major dashboard sections:</p> <ul> <li>Real-time Monitoring: Live sensor data and predictions</li> <li>Model Comparison: Performance analysis between different models</li> <li>Historical Analysis: Trends and pattern analysis over time</li> <li>Alert Management: Configure and manage alert thresholds</li> <li>System Status: Monitor system health and performance</li> </ul>"},{"location":"user-guide/dashboard-overview/#main-content-area","title":"Main Content Area","text":"<p>The central area displays the selected dashboard view with interactive charts, tables, and controls.</p>"},{"location":"user-guide/dashboard-overview/#side-panel-when-applicable","title":"Side Panel (when applicable)","text":"<p>Some views include a side panel with: - Filter controls - Configuration options - Additional metrics - Quick actions</p>"},{"location":"user-guide/dashboard-overview/#key-features","title":"Key Features","text":""},{"location":"user-guide/dashboard-overview/#1-real-time-monitoring","title":"1. Real-time Monitoring","text":"<p>The real-time monitoring view provides:</p>"},{"location":"user-guide/dashboard-overview/#live-sensor-readings","title":"Live Sensor Readings","text":"<ul> <li>Temperature: Mold temperature readings</li> <li>Pressure: Casting pressure metrics</li> <li>Flow Rates: Cooling water and steel flow</li> <li>Speed: Casting speed monitoring</li> </ul>"},{"location":"user-guide/dashboard-overview/#prediction-display","title":"Prediction Display","text":"<ul> <li>Defect Probability: Real-time defect likelihood (0-1 scale)</li> <li>Confidence Score: Model confidence in predictions</li> <li>Alert Level: Visual indicators (Green/Yellow/Red)</li> <li>Trend Indicators: Directional arrows showing trends</li> </ul>"},{"location":"user-guide/dashboard-overview/#key-metrics-cards","title":"Key Metrics Cards","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Current Defect  \u2502 \u2502 Avg Confidence  \u2502 \u2502 Active Alerts   \u2502\n\u2502 Probability     \u2502 \u2502                 \u2502 \u2502                 \u2502\n\u2502                 \u2502 \u2502                 \u2502 \u2502                 \u2502\n\u2502     0.15        \u2502 \u2502     0.89        \u2502 \u2502       2         \u2502\n\u2502                 \u2502 \u2502                 \u2502 \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/dashboard-overview/#2-model-comparison","title":"2. Model Comparison","text":""},{"location":"user-guide/dashboard-overview/#2-model-comparison_1","title":"2. Model Comparison","text":"<p>Compare performance between different ML models:</p>"},{"location":"user-guide/dashboard-overview/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Accuracy: Overall prediction accuracy</li> <li>Precision: True positive rate</li> <li>Recall: Sensitivity measure</li> <li>F1-Score: Harmonic mean of precision and recall</li> <li>AUC-ROC: Area under ROC curve</li> </ul>"},{"location":"user-guide/dashboard-overview/#visualization-charts","title":"Visualization Charts","text":"<ul> <li>ROC Curves: Model discrimination ability</li> <li>Precision-Recall Curves: Performance trade-offs</li> <li>Feature Importance: Variable significance</li> <li>Confusion Matrix: Classification accuracy breakdown</li> </ul>"},{"location":"user-guide/dashboard-overview/#side-by-side-comparison","title":"Side-by-side Comparison","text":"<pre><code>Model Performance Comparison\n                    XGBoost    LSTM     Ensemble\nAccuracy            0.87       0.89     0.91\nPrecision           0.84       0.88     0.90\nRecall              0.82       0.86     0.89\nF1-Score            0.83       0.87     0.89\nTraining Time       2.3 min    8.7 min  11.2 min\n</code></pre>"},{"location":"user-guide/dashboard-overview/#3-historical-analysis","title":"3. Historical Analysis","text":""},{"location":"user-guide/dashboard-overview/#3-historical-analysis_1","title":"3. Historical Analysis","text":"<p>Analyze trends and patterns over time:</p>"},{"location":"user-guide/dashboard-overview/#time-series-charts","title":"Time Series Charts","text":"<ul> <li>Defect Rate Trends: Historical defect rates</li> <li>Sensor Pattern Analysis: Long-term sensor behavior</li> <li>Model Performance: Accuracy trends over time</li> <li>Process Stability: Variance and consistency metrics</li> </ul>"},{"location":"user-guide/dashboard-overview/#interactive-features","title":"Interactive Features","text":"<ul> <li>Date Range Selection: Choose analysis period</li> <li>Zoom and Pan: Detailed chart exploration</li> <li>Data Export: Download analysis results</li> <li>Statistical Summaries: Automatic trend analysis</li> </ul>"},{"location":"user-guide/dashboard-overview/#4-alert-management","title":"4. Alert Management","text":""},{"location":"user-guide/dashboard-overview/#4-alert-management_1","title":"4. Alert Management","text":"<p>Configure and manage the alerting system:</p>"},{"location":"user-guide/dashboard-overview/#alert-configuration","title":"Alert Configuration","text":"<ul> <li>Threshold Settings: Defect probability limits</li> <li>Notification Methods: Email, SMS, dashboard</li> <li>Escalation Rules: Multi-level alert hierarchy</li> <li>Time-based Rules: Different thresholds by shift/time</li> </ul>"},{"location":"user-guide/dashboard-overview/#active-alerts-dashboard","title":"Active Alerts Dashboard","text":"<pre><code>Current Alerts\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\udd34 HIGH: Defect probability 0.85 (Threshold: 0.8)      \u2502\n\u2502 \ud83d\udfe1 MED:  Temperature variance above normal              \u2502\n\u2502 \ud83d\udfe1 MED:  Model confidence below 0.7                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/dashboard-overview/#interactive-controls","title":"Interactive Controls","text":""},{"location":"user-guide/dashboard-overview/#time-range-selector","title":"Time Range Selector","text":"<p>Most views include time range controls:</p> <pre><code>[Last Hour] [Last 4 Hours] [Last Day] [Custom Range]\n</code></pre>"},{"location":"user-guide/dashboard-overview/#refresh-controls","title":"Refresh Controls","text":"<pre><code>Auto-refresh: [ON/OFF]  Interval: [5s] [15s] [30s] [1m]\n</code></pre>"},{"location":"user-guide/dashboard-overview/#export-options","title":"Export Options","text":"<pre><code>[Export CSV] [Export PNG] [Generate Report]\n</code></pre>"},{"location":"user-guide/dashboard-overview/#dashboard-configuration","title":"Dashboard Configuration","text":""},{"location":"user-guide/dashboard-overview/#user-preferences","title":"User Preferences","text":"<p>Access user preferences via the settings menu:</p> <ul> <li>Display Options: Chart types, color schemes</li> <li>Refresh Rates: Auto-update intervals</li> <li>Alert Preferences: Notification settings</li> <li>Dashboard Layout: Customize panel arrangement</li> </ul>"},{"location":"user-guide/dashboard-overview/#theme-options","title":"Theme Options","text":"<p>The dashboard supports multiple themes:</p> Light ThemeDark ThemeHigh Contrast <p>Clean, professional appearance suitable for well-lit environments.</p> <p>Reduced eye strain for low-light monitoring environments.</p> <p>Enhanced visibility for accessibility requirements.</p>"},{"location":"user-guide/dashboard-overview/#mobile-responsiveness","title":"Mobile Responsiveness","text":"<p>The dashboard is optimized for various screen sizes:</p>"},{"location":"user-guide/dashboard-overview/#desktop-1200px","title":"Desktop (&gt;1200px)","text":"<ul> <li>Full feature set</li> <li>Multi-panel layout</li> <li>Detailed charts and tables</li> </ul>"},{"location":"user-guide/dashboard-overview/#tablet-768px-1200px","title":"Tablet (768px - 1200px)","text":"<ul> <li>Responsive layout</li> <li>Simplified navigation</li> <li>Touch-friendly controls</li> </ul>"},{"location":"user-guide/dashboard-overview/#mobile-768px","title":"Mobile (&lt; 768px)","text":"<ul> <li>Essential features only</li> <li>Vertical layout</li> <li>Large touch targets</li> </ul>"},{"location":"user-guide/dashboard-overview/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/dashboard-overview/#data-loading","title":"Data Loading","text":"<p>The dashboard implements several performance optimizations:</p> <ul> <li>Lazy Loading: Charts load only when visible</li> <li>Data Caching: Recent data cached locally</li> <li>Progressive Loading: Large datasets load incrementally</li> <li>WebSocket Updates: Real-time data via WebSockets</li> </ul>"},{"location":"user-guide/dashboard-overview/#browser-requirements","title":"Browser Requirements","text":"<p>For optimal performance: - RAM: 2GB+ available memory - Network: Stable internet connection - Browser: Modern browser with JavaScript enabled</p>"},{"location":"user-guide/dashboard-overview/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Action <code>R</code> Refresh current view <code>F</code> Toggle fullscreen <code>H</code> Show/hide help <code>Space</code> Pause/resume auto-refresh <code>Esc</code> Close modals"},{"location":"user-guide/dashboard-overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/dashboard-overview/#common-issues","title":"Common Issues","text":"<p>Dashboard Not Loading</p> <ul> <li>Check that the dashboard service is running</li> <li>Verify port 8050 is not blocked by firewall</li> <li>Clear browser cache and cookies</li> </ul> <p>Slow Performance</p> <ul> <li>Reduce auto-refresh frequency</li> <li>Clear browser cache</li> <li>Check network connectivity</li> <li>Restart dashboard service</li> </ul> <p>Data Not Updating</p> <ul> <li>Check data source connections</li> <li>Verify auto-refresh is enabled</li> <li>Check for JavaScript errors in browser console</li> </ul>"},{"location":"user-guide/dashboard-overview/#browser-console","title":"Browser Console","text":"<p>Access browser developer tools (F12) to check for errors:</p> <pre><code>// Check WebSocket connection\nconsole.log(window.WebSocket);\n\n// Check for JavaScript errors\nconsole.log('Dashboard loaded successfully');\n</code></pre>"},{"location":"user-guide/dashboard-overview/#getting-help","title":"Getting Help","text":"<ul> <li>Tooltips: Hover over charts and controls for help</li> <li>Help Menu: Click the <code>?</code> icon for context-sensitive help</li> <li>Documentation: This guide and API Reference</li> <li>Support: GitHub Issues</li> </ul>"},{"location":"user-guide/dashboard-overview/#next-api-reference","title":"Next: API Reference \u2192","text":""},{"location":"user-guide/dashboard-overview/#introduction","title":"Introduction","text":"<p>The Steel Defect Detection Dashboard provides a comprehensive interface for monitoring continuous steel casting processes and predicting quality defects in real-time. This guide covers all aspects of using the dashboard effectively.</p>"},{"location":"user-guide/dashboard-overview/#getting-started","title":"Getting Started","text":""},{"location":"user-guide/dashboard-overview/#accessing-the-dashboard","title":"Accessing the Dashboard","text":"<p>The dashboard is accessible through a web browser at the configured URL. Default local access is typically available at:</p> <pre><code>http://localhost:8501\n</code></pre>"},{"location":"user-guide/dashboard-overview/#authentication","title":"Authentication","text":"<p>Currently, the dashboard operates in demonstration mode without authentication requirements. In production deployments, appropriate access controls should be implemented.</p>"},{"location":"user-guide/dashboard-overview/#main-interface-components","title":"Main Interface Components","text":""},{"location":"user-guide/dashboard-overview/#navigation-menu","title":"Navigation Menu","text":"<p>The dashboard features a sidebar navigation with the following sections:</p> <ul> <li>Home: Overview and system status</li> <li>Real-time Monitoring: Live sensor data and predictions</li> <li>Historical Analysis: Past performance and trends</li> <li>Alert Management: Active alerts and notification settings</li> <li>Model Performance: ML model metrics and evaluation</li> <li>Configuration: System settings and parameters</li> </ul>"},{"location":"user-guide/dashboard-overview/#status-indicators","title":"Status Indicators","text":"<p>Color-coded status indicators provide quick visual feedback:</p> <ul> <li>Green: Normal operation, no issues detected</li> <li>Yellow: Warning condition, attention recommended</li> <li>Red: Alert condition, immediate action required</li> <li>Gray: No data or system offline</li> </ul>"},{"location":"user-guide/dashboard-overview/#real-time-monitoring","title":"Real-time Monitoring","text":""},{"location":"user-guide/dashboard-overview/#live-data-display","title":"Live Data Display","text":"<p>The monitoring interface shows real-time sensor data including:</p> <ul> <li>Temperature readings from multiple casting zones</li> <li>Pressure measurements throughout the process</li> <li>Flow rates for cooling water and molten steel</li> <li>Chemical composition data when available</li> </ul>"},{"location":"user-guide/dashboard-overview/#prediction-results","title":"Prediction Results","text":"<p>ML model predictions are displayed with:</p> <ul> <li>Defect probability scores for different defect types</li> <li>Confidence intervals for prediction reliability</li> <li>Risk assessments based on current process conditions</li> <li>Trend indicators showing prediction changes over time</li> </ul>"},{"location":"user-guide/dashboard-overview/#interactive-charts","title":"Interactive Charts","text":"<p>Charts and visualizations provide detailed insights:</p> <ul> <li>Time series plots for sensor data trends</li> <li>Correlation matrices showing parameter relationships</li> <li>Distribution plots for quality metrics</li> <li>Prediction timelines with historical context</li> </ul>"},{"location":"user-guide/dashboard-overview/#alert-management","title":"Alert Management","text":""},{"location":"user-guide/dashboard-overview/#alert-types","title":"Alert Types","text":"<p>The system monitors for several types of quality issues:</p> <ul> <li>Surface cracks: Longitudinal and transverse defects</li> <li>Internal defects: Inclusions and porosity</li> <li>Dimensional variations: Thickness and width deviations</li> <li>Chemical composition: Out-of-specification conditions</li> </ul>"},{"location":"user-guide/dashboard-overview/#alert-configuration_1","title":"Alert Configuration","text":"<p>Users can configure alert parameters:</p> <ul> <li>Threshold values for different defect probabilities</li> <li>Notification methods (dashboard, email, SMS)</li> <li>Escalation rules for critical conditions</li> <li>Acknowledgment requirements for alert resolution</li> </ul>"},{"location":"user-guide/dashboard-overview/#alert-history","title":"Alert History","text":"<p>The alert history section provides:</p> <ul> <li>Chronological log of all alert events</li> <li>Resolution tracking and response times</li> <li>Performance metrics for alert accuracy</li> <li>Export capabilities for reporting</li> </ul>"},{"location":"user-guide/dashboard-overview/#historical-analysis","title":"Historical Analysis","text":""},{"location":"user-guide/dashboard-overview/#data-exploration","title":"Data Exploration","text":"<p>Historical analysis tools include:</p> <ul> <li>Date range selection for specific time periods</li> <li>Filter options by shift, product type, or conditions</li> <li>Statistical summaries of process performance</li> <li>Trend analysis with regression and forecasting</li> </ul>"},{"location":"user-guide/dashboard-overview/#performance-metrics_1","title":"Performance Metrics","text":"<p>Key performance indicators (KPIs) tracked:</p> <ul> <li>Defect detection rate and false positive percentages</li> <li>Process efficiency and throughput metrics</li> <li>Quality scores and customer satisfaction data</li> <li>Cost impact analysis for defect prevention</li> </ul>"},{"location":"user-guide/dashboard-overview/#reporting-features","title":"Reporting Features","text":"<p>Generate comprehensive reports with:</p> <ul> <li>Executive summaries for management review</li> <li>Technical details for process engineers</li> <li>Trend analysis with recommendations</li> <li>Export formats (PDF, Excel, CSV)</li> </ul>"},{"location":"user-guide/dashboard-overview/#model-performance","title":"Model Performance","text":""},{"location":"user-guide/dashboard-overview/#model-metrics","title":"Model Metrics","text":"<p>Monitor ML model performance through:</p> <ul> <li>Accuracy scores and confusion matrices</li> <li>Precision and recall for different defect types</li> <li>ROC curves and AUC measurements</li> <li>Feature importance rankings</li> </ul>"},{"location":"user-guide/dashboard-overview/#model-comparison","title":"Model Comparison","text":"<p>Compare different model approaches:</p> <ul> <li>LSTM vs baseline model performance</li> <li>Training progress and validation curves</li> <li>Hyperparameter optimization results</li> <li>Ensemble model performance</li> </ul>"},{"location":"user-guide/dashboard-overview/#configuration-settings","title":"Configuration Settings","text":""},{"location":"user-guide/dashboard-overview/#system-parameters","title":"System Parameters","text":"<p>Configurable system settings include:</p> <ul> <li>Data ingestion frequency and sources</li> <li>Model prediction intervals and thresholds</li> <li>Display preferences and dashboard layout</li> <li>User access controls and permissions</li> </ul>"},{"location":"user-guide/dashboard-overview/#data-sources","title":"Data Sources","text":"<p>Configure data input connections:</p> <ul> <li>PLC interfaces for real-time sensor data</li> <li>Database connections for historical information</li> <li>File imports for batch processing</li> <li>API endpoints for external systems</li> </ul>"},{"location":"user-guide/dashboard-overview/#troubleshooting_1","title":"Troubleshooting","text":""},{"location":"user-guide/dashboard-overview/#common-issues_1","title":"Common Issues","text":"<p>Frequently encountered problems and solutions:</p> <ul> <li>Data connectivity: Check network and sensor connections</li> <li>Slow performance: Review data volume and processing load</li> <li>Prediction accuracy: Verify model training and data quality</li> <li>Display issues: Clear browser cache and check compatibility</li> </ul>"},{"location":"user-guide/dashboard-overview/#support-resources","title":"Support Resources","text":"<p>Additional help and support:</p> <ul> <li>User manual with detailed instructions</li> <li>Technical documentation for advanced configuration</li> <li>Contact information for system administrators</li> <li>Training materials and video tutorials</li> </ul>"},{"location":"user-guide/dashboard-overview/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/dashboard-overview/#monitoring-guidelines","title":"Monitoring Guidelines","text":"<p>Recommended practices for effective monitoring:</p> <ul> <li>Regular review of alert thresholds and accuracy</li> <li>Shift handover procedures using dashboard data</li> <li>Trend analysis for predictive maintenance</li> <li>Quality improvement based on historical patterns</li> </ul>"},{"location":"user-guide/dashboard-overview/#data-management","title":"Data Management","text":"<p>Maintain data quality through:</p> <ul> <li>Regular calibration of sensors and instruments</li> <li>Data validation checks and error correction</li> <li>Backup procedures for critical information</li> <li>Archive management for long-term storage</li> </ul>"},{"location":"user-guide/dashboard-overview/#conclusion","title":"Conclusion","text":"<p>The Steel Defect Detection Dashboard provides powerful tools for monitoring and improving continuous casting quality. Regular use of all features will maximize the benefits of predictive defect detection and help maintain optimal process performance.</p> <p>For additional support or questions about specific features, consult the technical documentation or contact the system development team.</p>"}]}